///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        01/Dec/2016  11:04:25 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\Source\Manage\incode\minc /
//                          ode.c                                             /
//    Command line       =  -f E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zs /
//                          tack\Applications\SmartApp\CC2530DB\Devices\..\.. /
//                          \..\..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ    /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK    /
//                          -DSSA_CONNECTOR) -f E:\work\zigbee\ZStack-Smart-2 /
//                          .5.2b\Projects\zstack\Applications\SmartApp\CC253 /
//                          0DB\Devices\..\..\..\..\Tools\CC2530DB\f8wConfig. /
//                          cfg (-DZIGBEEPRO -DSECURE=1                       /
//                          -DZG_SECURE_DYNAMIC=1 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=TRUE -DPOLL_RATE=1000        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\work\zigbee\ZStack-Smar /
//                          t-2.5.2b\Projects\zstack\Applications\SmartApp\So /
//                          urce\Manage\incode\mincode.c -D SECURE=1 -D       /
//                          ZTOOL_P1 -D DEVICE_TYPE_ID=0xFE -D                /
//                          SIGNAL_AMPLIFIER_SETTING -D                       /
//                          xPOWER_AMPLIFIER_POSITION_1 -D xNWK_AUTO_POLL -D  /
//                          xHAL_UART_DMA=2 -D xHAL_UART_DMA_ALT1 -D          /
//                          xJIAJU_BUILDIN -D MT_TASK -D MT_SYS_FUNC -D       /
//                          MT_ZDO_FUNC -D NV_INIT -D NV_RESTORE -lC          /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\bin\DemoBaseZC\L /
//                          ist\ -lA E:\work\zigbee\ZStack-Smart-2.5.2b\Proje /
//                          cts\zstack\Applications\SmartApp\CC2530DB\bin\Dem /
//                          oBaseZC\List\ --diag_suppress Pe001,Pa010 -o      /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\bin\DemoBaseZC\O /
//                          bj\ -e --debug --core=plain --dptr=16,1           /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zs /
//                          tack\Applications\SmartApp\CC2530DB\Devices\ -I   /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\So /
//                          urce\Common\ -I E:\work\zigbee\ZStack-Smart-2.5.2 /
//                          b\Projects\zstack\Applications\SmartApp\CC2530DB\ /
//                          Devices\..\..\Source\Connector\ -I                /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\So /
//                          urce\\EndNode\ -I E:\work\zigbee\ZStack-Smart-2.5 /
//                          .2b\Projects\zstack\Applications\SmartApp\CC2530D /
//                          B\Devices\..\..\Source\Board\ -I                  /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\So /
//                          urce\Manage\ -I E:\work\zigbee\ZStack-Smart-2.5.2 /
//                          b\Projects\zstack\Applications\SmartApp\CC2530DB\ /
//                          Devices\..\..\Source\Manage\Callbacks\ -I         /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\So /
//                          urce\Manage\debug\ -I E:\work\zigbee\ZStack-Smart /
//                          -2.5.2b\Projects\zstack\Applications\SmartApp\CC2 /
//                          530DB\Devices\..\..\Source\Manage\HeartBeat\ -I   /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\So /
//                          urce\Manage\incode\ -I E:\work\zigbee\ZStack-Smar /
//                          t-2.5.2b\Projects\zstack\Applications\SmartApp\CC /
//                          2530DB\Devices\..\..\..\..\ZMain\TI2530DB\ -I     /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\hal\include\ -I              /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\hal\target\CC2530EB\ -I      /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\mac\include\ -I              /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\mac\high_level\ -I           /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\mac\low_level\srf04\ -I      /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\mac\low_level\srf04\single_c /
//                          hip\ -I E:\work\zigbee\ZStack-Smart-2.5.2b\Projec /
//                          ts\zstack\Applications\SmartApp\CC2530DB\Devices\ /
//                          ..\..\..\..\..\..\Components\mt\ -I               /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\osal\include\ -I             /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\services\saddr\ -I           /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\services\sdata\ -I           /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\stack\af\ -I                 /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\stack\nwk\ -I                /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\stack\sapi\ -I               /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\stack\sec\ -I                /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\stack\sys\ -I                /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\stack\zdo\ -I                /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\zmac\ -I                     /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\zmac\f8w\ -Oh                /
//                          --require_prototypes                              /
//    List file          =  E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\bin\DemoBaseZC\L /
//                          ist\mincode.s51                                   /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME mincode

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_MUL
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?SS_SHR
        EXTERN ?S_SHL
        EXTERN ?UL_SHR
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345

        PUBLIC ??gen_rand?relay
        FUNCTION ??gen_rand?relay,0203H
        PUBLIC ??incode_atox?relay
        FUNCTION ??incode_atox?relay,0203H
        PUBLIC ??incode_ctox16?relay
        FUNCTION ??incode_ctox16?relay,0203H
        PUBLIC ??incode_ctox32?relay
        FUNCTION ??incode_ctox32?relay,0203H
        PUBLIC ??incode_ctox?relay
        FUNCTION ??incode_ctox?relay,0203H
        PUBLIC ??incode_ctoxs?relay
        FUNCTION ??incode_ctoxs?relay,0203H
        PUBLIC ??incode_xtoc16?relay
        FUNCTION ??incode_xtoc16?relay,0203H
        PUBLIC ??incode_xtoc32?relay
        FUNCTION ??incode_xtoc32?relay,0203H
        PUBLIC ??incode_xtocs?relay
        FUNCTION ??incode_xtocs?relay,0203H
        PUBWEAK __Constant_0
        PUBWEAK __Constant_101
        PUBLIC gen_rand
        FUNCTION gen_rand,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC incode_atox
        FUNCTION incode_atox,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC incode_ctox
        FUNCTION incode_ctox,0203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC incode_ctox16
        FUNCTION incode_ctox16,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC incode_ctox32
        FUNCTION incode_ctox32,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC incode_ctoxs
        FUNCTION incode_ctoxs,021203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC incode_xtoc16
        FUNCTION incode_xtoc16,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC incode_xtoc32
        FUNCTION incode_xtoc32,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC incode_xtocs
        FUNCTION incode_xtocs,0203H
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
gen_rand            SYMBOL "gen_rand"
??gen_rand?relay    SYMBOL "?relay", gen_rand
incode_atox         SYMBOL "incode_atox"
??incode_atox?relay SYMBOL "?relay", incode_atox
incode_ctox16       SYMBOL "incode_ctox16"
??incode_ctox16?relay SYMBOL "?relay", incode_ctox16
incode_ctox32       SYMBOL "incode_ctox32"
??incode_ctox32?relay SYMBOL "?relay", incode_ctox32
incode_ctox         SYMBOL "incode_ctox"
??incode_ctox?relay SYMBOL "?relay", incode_ctox
incode_ctoxs        SYMBOL "incode_ctoxs"
??incode_ctoxs?relay SYMBOL "?relay", incode_ctoxs
incode_xtoc16       SYMBOL "incode_xtoc16"
??incode_xtoc16?relay SYMBOL "?relay", incode_xtoc16
incode_xtoc32       SYMBOL "incode_xtoc32"
??incode_xtoc32?relay SYMBOL "?relay", incode_xtoc32
incode_xtocs        SYMBOL "incode_xtocs"
??incode_xtocs?relay SYMBOL "?relay", incode_xtocs

// E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstack\Applications\SmartApp\Source\Manage\incode\mincode.c
//    1 /*
//    2  * incode.c
//    3  *
//    4  * Copyright (C) 2013 loongsky development.
//    5  *
//    6  * Sam Chen <xuejian1354@163.com>
//    7  *
//    8  * This software is licensed under the terms of the GNU General Public
//    9  * License version 2, as published by the Free Software Foundation, and
//   10  * may be copied, distributed, and modified under those terms.
//   11  *
//   12  * This program is distributed in the hope that it will be useful,
//   13  * but WITHOUT ANY WARRANTY; without even the implied warranty of
//   14  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   15  * GNU General Public License for more details.
//   16  */
//   17 #include "mincode.h"
//   18 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   19 uint8 incode_ctox(uint8 src)
incode_ctox:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function incode_ctox
        CODE
//   20 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//   21 	char temp = 0;
        MOV     R1,#0x0
//   22 
//   23 	if(src>='0' && src<='9')
        MOV     A,#-0x30
        ADD     A,R0
        MOV     R2,A
        CLR     C
        SUBB    A,#0xa
        JNC     ??incode_ctox_0
//   24 		temp = src-'0';
        MOV     A,R2
        SJMP    ??incode_ctox_1
//   25 	else if(src>='a' && src<='f')
??incode_ctox_0:
        MOV     A,#-0x61
        ADD     A,R0
        CLR     C
        SUBB    A,#0x6
        JNC     ??incode_ctox_2
//   26 		temp = src-'a'+10;
        MOV     A,#-0x57
        SJMP    ??incode_ctox_3
//   27 	else if(src>='A' && src<='F')
??incode_ctox_2:
        MOV     A,#-0x41
        ADD     A,R0
        CLR     C
        SUBB    A,#0x6
        JNC     ??incode_ctox_4
//   28 		temp = src-'A'+10;
        MOV     A,#-0x37
??incode_ctox_3:
        ADD     A,R0
??incode_ctox_1:
        MOV     R1,A
//   29 
//   30 	return temp;
??incode_ctox_4:
        LJMP    ?BRET
        CFI EndBlock cfiBlock0
//   31 }
//   32 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   33 uint8 incode_atox(uint8 *src, int len)
incode_atox:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function incode_atox
        CODE
//   34 {
        FUNCALL incode_atox, incode_ctox
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//   35 	char temp=0, i=0, length;
        MOV     R1,#0x0
        MOV     ?V0 + 2,R1
//   36 	length = len;
        MOV     A,R4
        MOV     ?V0 + 4,A
        JZ      ??incode_atox_0
//   37 
//   38 	while(length--)
//   39 	{
//   40 		temp = incode_ctox(*(src+i)) + (temp<<4);
??incode_atox_1:
        MOV     A,R1
        SWAP    A
        ANL     A,#0xf0
        MOV     ?V0 + 3,A
        ; Setup parameters for call to function incode_ctox
        MOV     ?V0 + 0,?V0 + 2
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_4:
        ADD     A,?V0 + 3
        MOV     R1,A
//   41 		i++;
        INC     ?V0 + 2
        DEC     ?V0 + 4
        MOV     A,?V0 + 4
        JNZ     ??incode_atox_1
//   42 	}
//   43 
//   44 	return temp;
??incode_atox_0:
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//   45 }
//   46  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   47 void incode_ctoxs(uint8 *dest ,uint8 *src, int len)
incode_ctoxs:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function incode_ctoxs
        CODE
//   48 {
        FUNCALL incode_ctoxs, incode_ctox
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL incode_ctoxs, incode_ctox
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//   49 	int i, temp;
//   50 	if(len<2 || dest==NULL || src==NULL)
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x2
        MOV     A,?V0 + 1
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_0:
        JC      ??incode_ctoxs_0
        MOV     A,R2
        ORL     A,R3
        JZ      ??incode_ctoxs_0
        MOV     A,R4
        ORL     A,R5
        JZ      ??incode_ctoxs_0
//   51 	{
//   52 		return;
//   53 	}
//   54 
//   55 	for(i=0; i<(len>>1); i++)
        MOV     A,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?SS_SHR
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        CLR     C
        MOV     A,?V0 + 4
        SUBB    A,#0x1
        MOV     A,?V0 + 5
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_1:
        JC      ??incode_ctoxs_0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     ?V0 + 2,?V0 + 4
        MOV     ?V0 + 3,?V0 + 5
//   56 	{
//   57 		temp = *(src+(i<<1));
//   58 		dest[i] = (incode_ctox(temp)<<4);
??incode_ctoxs_1:
        ; Setup parameters for call to function incode_ctox
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        SWAP    A
        ANL     A,#0xf0
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//   59 		
//   60 		temp = *(src+(i<<1)+1);
//   61 		dest[i] += incode_ctox(temp);
        ; Setup parameters for call to function incode_ctox
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        LCALL   ?Subroutine3 & 0xFFFF
//   62 	}
??CrossCallReturnLabel_6:
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        MOV     A,?V0 + 2
        ADD     A,#-0x1
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#-0x1
        MOV     ?V0 + 3,A
        MOV     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??incode_ctoxs_1
??incode_ctoxs_0:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//   63 	 
//   64 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 13)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??incode_ctox?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6
//   65 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   66 void incode_xtocs(uint8 *dest , uint8 *src, int len)
incode_xtocs:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function incode_xtocs
        CODE
//   67 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//   68     int i, temp;
//   69 	if(len<1 || dest==NULL || src==NULL)
        CLR     C
        MOV     A,R6
        SUBB    A,#0x1
        MOV     A,R7
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_2:
        JC      ??incode_xtocs_0
        MOV     A,R0
        ORL     A,R1
        JZ      ??incode_xtocs_0
        MOV     A,R4
        ORL     A,R5
        JZ      ??incode_xtocs_0
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
//   70 	{
//   71 		return;
//   72 	}
//   73 
//   74 	for(i=0; i<len; i++)
//   75 	{
//   76 		temp = (*(src+i)>>4);
??incode_xtocs_1:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        MOV     R0,A
//   77 		if(temp < 0xA)
        CLR     C
        SUBB    A,#0xa
        MOV     A,R0
        JNC     ??incode_xtocs_2
//   78 		{
//   79 			dest[(i<<1)] = temp + '0';	
        ADD     A,#0x30
        SJMP    ??incode_xtocs_3
//   80 		}
//   81 		else
//   82 		{
//   83 			dest[(i<<1)] = temp - 0xA + 'A';	
??incode_xtocs_2:
        ADD     A,#0x37
??incode_xtocs_3:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
//   84 		}
//   85 		
//   86 		temp = (*(src+i)&0x0F);
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOV     R0,A
//   87 		if(temp < 0xA)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        SUBB    A,#0xa
        MOV     A,R0
        JNC     ??incode_xtocs_4
//   88 		{
//   89 			dest[(i<<1)+1] = temp + '0';	
        ADD     A,#0x30
        SJMP    ??incode_xtocs_5
//   90 		}
//   91 		else
//   92 		{
//   93 			dest[(i<<1)+1] = temp - 0xA + 'A';	
??incode_xtocs_4:
        ADD     A,#0x37
??incode_xtocs_5:
        MOVX    @DPTR,A
//   94 		}
//   95 	}
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,?V0 + 0
        ADD     A,#-0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x1
        MOV     ?V0 + 1,A
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     ??incode_xtocs_1
??incode_xtocs_0:
        SJMP    ??Subroutine5_0
        CFI EndBlock cfiBlock7
//   96 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond8 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        RET
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
//   97 
//   98 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   99 void incode_ctox16(uint16 *dest, uint8 *src)
incode_ctox16:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function incode_ctox16
        CODE
//  100 {
        FUNCALL incode_ctox16, incode_ctoxs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  101 	unsigned char dsts[2];
//  102 	incode_ctoxs(dsts, src, 4);
        ; Setup parameters for call to function incode_ctoxs
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??incode_ctoxs?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  103 	*dest = dsts[0]<<8;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  104 	*dest += dsts[1];
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        CFI EndBlock cfiBlock13
//  105 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock14
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock15
//  106 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  107 void incode_xtoc16(uint8 *dest, uint16 src)
incode_xtoc16:
        CFI Block cfiBlock16 Using cfiCommon0
        CFI Function incode_xtoc16
        CODE
//  108 {
        FUNCALL incode_xtoc16, incode_xtocs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  109 	unsigned char val[2];
//  110 	val[0] = (src>>8);
        MOV     A,R5
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  111 	val[1] = (src&0xFF);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
//  112 	incode_xtocs(dest, val, 2);
        ; Setup parameters for call to function incode_xtocs
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??incode_xtocs?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  113 }
        SJMP    ?Subroutine0
        CFI EndBlock cfiBlock16
//  114 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  115 void incode_ctox32(uint32 *dest, uint8 *src)
incode_ctox32:
        CFI Block cfiBlock17 Using cfiCommon0
        CFI Function incode_ctox32
        CODE
//  116 {
        FUNCALL incode_ctox32, incode_ctoxs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  117 	int i;
//  118 	uint8 dsts[4];
//  119 	incode_ctoxs(dsts, src, 8);
        ; Setup parameters for call to function incode_ctoxs
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??incode_ctoxs?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  120 
//  121 	*dest = 0;
        MOV     DPTR,#__Constant_0
        LCALL   ?XLOAD_R2345
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?XSTORE_R2345
//  122 	for(i=0; i<4; i++)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
//  123 	{
//  124 		*dest += ((*dest)<<8)+dsts[i];
??incode_ctox32_0:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_101
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_MUL
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?L_ADD
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
//  125 	}
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,DPL
        XRL     A,R2
        JNZ     ??incode_ctox32_1
        MOV     A,DPH
        XRL     A,R3
??incode_ctox32_1:
        JNZ     ??incode_ctox32_0
        CFI EndBlock cfiBlock17
//  126 }
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 20)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock18
//  127 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  128 void incode_xtoc32(uint8 *dest, uint32 src)
incode_xtoc32:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function incode_xtoc32
        CODE
//  129 {
        FUNCALL incode_xtoc32, incode_xtocs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
//  130 	unsigned char val[4];
//  131 	val[0] = ((src>>24)&0xFF);
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  132 	val[1] = ((src>>16)&0xFF);
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  133 	val[2] = ((src>>8)&0xFF);
        MOV     ?V0 + 1,?V0 + 5
        MOV     A,?V0 + 1
        MOV     ?V0 + 0,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  134 	val[3] = (src&0xFF);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  135 	
//  136 	incode_xtocs(dest, val, 4);
        ; Setup parameters for call to function incode_xtocs
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??incode_xtocs?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  137 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock19
//  138 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  139 uint32 gen_rand(uint8 *seed)
gen_rand:
        CFI Block cfiBlock20 Using cfiCommon0
        CFI Function gen_rand
        CODE
//  140 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  141 	int i;
//  142 	unsigned int ra = 0;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  143 	for(i=0; i<8; i+=2)
        MOV     R4,#0x0
        MOV     R5,#0x0
//  144 	{
//  145 		ra += seed[i]<<(i<<2);
??gen_rand_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     A,R4
        RLC     A
        RLC     A
        ANL     A,#0xfc
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,?V0 + 3
        MOV     ?V0 + 1,A
//  146 	}
        MOV     A,R4
        ADD     A,#0x2
        INC     R4
        INC     R4
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R5,A
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_8:
        CLR     C
        MOV     A,R4
        SUBB    A,#0x8
        MOV     A,R5
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_3:
        JC      ??gen_rand_0
//  147 
//  148 	return ra;
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        CLR     A
        MOV     R4,A
        MOV     R5,A
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock20
//  149 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_7
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker23 Using cfiCommon1
        CFI (cfiPicker23) NoFunction
        CFI (cfiPicker23) Picker
        MOV     A,R2
        ADD     A,#0x2
        INC     R2
        INC     R2
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiPicker23

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_101:
        DD 257

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??incode_ctox?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    incode_ctox

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??incode_atox?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    incode_atox

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??incode_ctoxs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    incode_ctoxs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??incode_xtocs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    incode_xtocs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??incode_ctox16?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    incode_ctox16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??incode_xtoc16?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    incode_xtoc16

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??incode_ctox32?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    incode_ctox32

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??incode_xtoc32?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    incode_xtoc32

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??gen_rand?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    gen_rand

        END
// 
// 907 bytes in segment BANKED_CODE
//  54 bytes in segment BANK_RELAYS
//   8 bytes in segment XDATA_ROM_C
// 
// 961 bytes of CODE  memory
//   0 bytes of CONST memory (+ 8 bytes shared)
//
//Errors: none
//Warnings: none
