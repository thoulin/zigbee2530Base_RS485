///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        21/Nov/2016  19:31:15 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\Source\Manage\rfid\RC522_ /
//                          MifareCmd.c                                       /
//    Command line       =  -f E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zs /
//                          tack\Applications\SmartApp\CC2530DB\Devices\..\.. /
//                          \..\..\Tools\CC2530DB\f8wEndev.cfg (-DCPU32MHZ    /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3             /
//                          -DSSA_ENDNODE) -f E:\work\zigbee\ZStack-Smart-2.5 /
//                          .2b\Projects\zstack\Applications\SmartApp\CC2530D /
//                          B\Devices\..\..\..\..\Tools\CC2530DB\f8wConfig.cf /
//                          g (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=1   /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=600        /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\work\zigbee\ZStack-Smar /
//                          t-2.5.2b\Projects\zstack\Applications\SmartApp\So /
//                          urce\Manage\rfid\RC522_MifareCmd.c -D SECURE=1    /
//                          -D ZTOOL_P1 -D DEVICE_TYPE_ID=0xFE -D             /
//                          SIGNAL_AMPLIFIER_SETTING -D xNWK_AUTO_POLL -D     /
//                          xHAL_UART_DMA=2 -D xHAL_UART_DMA_ALT1 -D          /
//                          xJIAJU_BUILDIN -D MT_TASK -D MT_SYS_FUNC -D       /
//                          MT_ZDO_FUNC -D NV_INIT -D NV_RESTORE -lC          /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\bin\DemoBaseZD\L /
//                          ist\ -lA E:\work\zigbee\ZStack-Smart-2.5.2b\Proje /
//                          cts\zstack\Applications\SmartApp\CC2530DB\bin\Dem /
//                          oBaseZD\List\ --diag_suppress Pe001,Pa010 -o      /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\bin\DemoBaseZD\O /
//                          bj\ -e --debug --core=plain --dptr=16,1           /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zs /
//                          tack\Applications\SmartApp\CC2530DB\Devices\ -I   /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\So /
//                          urce\Common\ -I E:\work\zigbee\ZStack-Smart-2.5.2 /
//                          b\Projects\zstack\Applications\SmartApp\CC2530DB\ /
//                          Devices\..\..\Source\Connector\ -I                /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\So /
//                          urce\\EndNode\ -I E:\work\zigbee\ZStack-Smart-2.5 /
//                          .2b\Projects\zstack\Applications\SmartApp\CC2530D /
//                          B\Devices\..\..\Source\Board\ -I                  /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\So /
//                          urce\Manage\ -I E:\work\zigbee\ZStack-Smart-2.5.2 /
//                          b\Projects\zstack\Applications\SmartApp\CC2530DB\ /
//                          Devices\..\..\Source\Manage\Callbacks\ -I         /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\So /
//                          urce\Manage\debug\ -I E:\work\zigbee\ZStack-Smart /
//                          -2.5.2b\Projects\zstack\Applications\SmartApp\CC2 /
//                          530DB\Devices\..\..\Source\Manage\HeartBeat\ -I   /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\So /
//                          urce\Manage\incode\ -I E:\work\zigbee\ZStack-Smar /
//                          t-2.5.2b\Projects\zstack\Applications\SmartApp\CC /
//                          2530DB\Devices\..\..\..\..\ZMain\TI2530DB\ -I     /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\hal\include\ -I              /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\hal\target\CC2530EB\ -I      /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\mac\include\ -I              /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\mac\high_level\ -I           /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\mac\low_level\srf04\ -I      /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\mac\low_level\srf04\single_c /
//                          hip\ -I E:\work\zigbee\ZStack-Smart-2.5.2b\Projec /
//                          ts\zstack\Applications\SmartApp\CC2530DB\Devices\ /
//                          ..\..\..\..\..\..\Components\mt\ -I               /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\osal\include\ -I             /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\services\saddr\ -I           /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\services\sdata\ -I           /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\stack\af\ -I                 /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\stack\nwk\ -I                /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\stack\sapi\ -I               /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\stack\sec\ -I                /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\stack\sys\ -I                /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\stack\zdo\ -I                /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\zmac\ -I                     /
//                          E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\Devices\..\..\.. /
//                          \..\..\..\Components\zmac\f8w\ -Oh                /
//                          --require_prototypes                              /
//    List file          =  E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstac /
//                          k\Applications\SmartApp\CC2530DB\bin\DemoBaseZD\L /
//                          ist\RC522_MifareCmd.s51                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME RC522_MifareCmd

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Authentication?relay
        FUNCTION ??Authentication?relay,0203H
        PUBLIC ??CascAnticoll?relay
        FUNCTION ??CascAnticoll?relay,0203H
        PUBLIC ??HaltA?relay
        FUNCTION ??HaltA?relay,0203H
        PUBLIC ??InitBlock?relay
        FUNCTION ??InitBlock?relay,0203H
        PUBLIC ??M522PcdCmd?relay
        FUNCTION ??M522PcdCmd?relay,0203H
        PUBLIC ??Rc522Init?relay
        FUNCTION ??Rc522Init?relay,0203H
        PUBLIC ??Rc522RFReset?relay
        FUNCTION ??Rc522RFReset?relay,0203H
        PUBLIC ??Read?relay
        FUNCTION ??Read?relay,0203H
        PUBLIC ??Request?relay
        FUNCTION ??Request?relay,0203H
        PUBLIC ??Select?relay
        FUNCTION ??Select?relay,0203H
        PUBLIC ??SetTimeOut?relay
        FUNCTION ??SetTimeOut?relay,0203H
        PUBLIC ??ValueOper?relay
        FUNCTION ??ValueOper?relay,0203H
        PUBLIC ??Write?relay
        FUNCTION ??Write?relay,0203H
        PUBLIC Authentication
        FUNCTION Authentication,021203H
        ARGFRAME XSTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC CascAnticoll
        FUNCTION CascAnticoll,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 6, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC HaltA
        FUNCTION HaltA,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC InitBlock
        FUNCTION InitBlock,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC M522PcdCmd
        FUNCTION M522PcdCmd,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC MInfo
        PUBLIC MpIsrInfo
        PUBLIC Rc522Init
        FUNCTION Rc522Init,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC Rc522RFReset
        FUNCTION Rc522RFReset,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC `Read`
        FUNCTION `Read`,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Request
        FUNCTION Request,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC Select
        FUNCTION Select,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 6, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SerBuffer
        PUBLIC SetTimeOut
        FUNCTION SetTimeOut,021203H
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ValueOper
        FUNCTION ValueOper,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        PUBLIC `Write`
        FUNCTION `Write`,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
RcModifyReg         SYMBOL "RcModifyReg"
RcSetReg            SYMBOL "RcSetReg"
RcGetReg            SYMBOL "RcGetReg"
memcpy              SYMBOL "memcpy"
memset              SYMBOL "memset"
??RcGetReg?relay    SYMBOL "?relay", RcGetReg
??RcModifyReg?relay SYMBOL "?relay", RcModifyReg
??RcSetReg?relay    SYMBOL "?relay", RcSetReg
??memcpy?relay      SYMBOL "?relay", memcpy
??memset?relay      SYMBOL "?relay", memset
Authentication      SYMBOL "Authentication"
??Authentication?relay SYMBOL "?relay", Authentication
CascAnticoll        SYMBOL "CascAnticoll"
??CascAnticoll?relay SYMBOL "?relay", CascAnticoll
HaltA               SYMBOL "HaltA"
??HaltA?relay       SYMBOL "?relay", HaltA
InitBlock           SYMBOL "InitBlock"
??InitBlock?relay   SYMBOL "?relay", InitBlock
M522PcdCmd          SYMBOL "M522PcdCmd"
??M522PcdCmd?relay  SYMBOL "?relay", M522PcdCmd
Rc522Init           SYMBOL "Rc522Init"
??Rc522Init?relay   SYMBOL "?relay", Rc522Init
Rc522RFReset        SYMBOL "Rc522RFReset"
??Rc522RFReset?relay SYMBOL "?relay", Rc522RFReset
`Read`              SYMBOL "Read"
??Read?relay        SYMBOL "?relay", `Read`
Request             SYMBOL "Request"
??Request?relay     SYMBOL "?relay", Request
Select              SYMBOL "Select"
??Select?relay      SYMBOL "?relay", Select
SetTimeOut          SYMBOL "SetTimeOut"
??SetTimeOut?relay  SYMBOL "?relay", SetTimeOut
ValueOper           SYMBOL "ValueOper"
??ValueOper?relay   SYMBOL "?relay", ValueOper
`Write`             SYMBOL "Write"
??Write?relay       SYMBOL "?relay", `Write`

        EXTERN RcModifyReg
        FUNCTION RcModifyReg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RcSetReg
        FUNCTION RcSetReg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RcGetReg
        FUNCTION RcGetReg,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memset
        FUNCTION memset,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??RcGetReg?relay
        FUNCTION ??RcGetReg?relay,00H
        EXTERN ??RcModifyReg?relay
        FUNCTION ??RcModifyReg?relay,00H
        EXTERN ??RcSetReg?relay
        FUNCTION ??RcSetReg?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??memset?relay
        FUNCTION ??memset?relay,00H

// E:\work\zigbee\ZStack-Smart-2.5.2b\Projects\zstack\Applications\SmartApp\Source\Manage\rfid\RC522_MifareCmd.c
//    1 /* /////////////////////////////////////////////////////////////////////////////////////////////////
//    2 //                     Copyright (c) Philips Semiconductors
//    3 //
//    4 //         All rights are reserved. Reproduction in whole or in part is
//    5 //        prohibited without the written consent of the copyright owner.
//    6 //    Philips reserves the right to make changes without notice at any time.
//    7 //   Philips makes no warranty, expressed, implied or statutory, including but
//    8 //   not limited to any implied warranty of merchantability or fitness for any
//    9 //  particular purpose, or that the use will not infringe any third party patent,
//   10 //   copyright or trademark. Philips must not be liable for any loss or damage
//   11 //                            arising from its use.
//   12 ///////////////////////////////////////////////////////////////////////////////////////////////// */
//   13 
//   14 /*! \file Mifare.c
//   15  *
//   16  * Project: Mifare reader with RC522
//   17  *
//   18  * Workfile: Mifare.c
//   19  * $Author: Bob Jiang
//   20  * $Revision: 1.0 $
//   21  * $Date: Wed Aug 17 2005 $
//   22  *
//   23  * Comment:
//   24  *  All the ISO14443-3 protocol and mifare command set are all implemented here.
//   25  *  All the founctions in this file is totally independent of hardware.
//   26  *  The source can be ported to other platforms very easily.
//   27  *
//   28  *  The interrupt pin of the reader IC is not conntected and no interrupt needed.
//   29  *  All protocol relevant timing constraints are generated
//   30  *  by the internal timer of the reader module.
//   31  *
//   32  *  Therefore the function M522PcdCmd is very important for understanding
//   33  *  of the communication between reader and card.
//   34  *
//   35  *
//   36  * History:
//   37  *
//   38  *
//   39 */
//   40 //#include <REG936.H>
//   41 #include <string.h>
//   42 #include "RC522_Reg.h"
//   43 #include "RC522_RegCtrl.h"
//   44 #include "RC522_OpCtrl.h"
//   45 #include "RC522_ErrCode.h"
//   46 #include "RC522_Mifare.h"
//   47 #include "mfrc522.h"
//   48 #include "I2C.h"
//   49 
//   50 #define ResetInfo(info)    \ 
//   51             info.cmd            = 0;\ 
//   52             info.status         = STATUS_SUCCESS;\ 
//   53             info.nBytesSent     = 0;\ 
//   54             info.nBytesToSend   = 0;\ 
//   55             info.nBytesReceived = 0;\ 
//   56             info.nBitsReceived  = 0;\ 
//   57             info.collPos        = 0;
//   58 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   59 MfCmdInfo MInfo;
MInfo:
        DS 8
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   60 volatile MfCmdInfo *MpIsrInfo = 0;
MpIsrInfo:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   61 unsigned char SerBuffer[64];
SerBuffer:
        DS 64
        REQUIRE __INIT_XDATA_Z
//   62 
//   63 
//   64 /*************************************************
//   65 Function:       SetPowerDown
//   66 Description:
//   67      set the rc522 enter or exit power down mode
//   68 Parameter:
//   69      ucFlag     0   --  exit power down mode
//   70                 !0  --  enter power down mode
//   71 Return:
//   72      short      status of implement
//   73 **************************************************/
//   74 #if 0 // This function is currently not used
//   75 void SetPowerDown(unsigned char ucFlag)
//   76 {
//   77     unsigned char RegVal;
//   78 /*
//   79     Note: The bit Power Down can not be set when the SoftReset command has been activated.
//   80 */
//   81     if(ucFlag)
//   82     {
//   83         RegVal = RcGetReg(RC522_REG_COMMAND);  //enter power down mode
//   84         RegVal |= 0x10;
//   85         RcSetReg(RC522_REG_COMMAND, RegVal);
//   86     }
//   87     else
//   88     {
//   89         RegVal = RcGetReg(RC522_REG_COMMAND);  //disable power down mode
//   90         RegVal &= (~0x10);
//   91         RcSetReg(RC522_REG_COMMAND, RegVal);
//   92     }
//   93 }
//   94 #endif
//   95 /*************************************************
//   96 Function:       SetTimeOut
//   97 Description:
//   98      Adjusts the timeout in 100us steps
//   99 Parameter:
//  100      uiMicroSeconds   the time to set the timer(100us as a step)
//  101 Return:
//  102      short      status of implement
//  103 **************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  104 short SetTimeOut(unsigned int uiMicroSeconds)
SetTimeOut:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SetTimeOut
        CODE
//  105 {
        FUNCALL SetTimeOut, RcModifyReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetTimeOut, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetTimeOut, RcGetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetTimeOut, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetTimeOut, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SetTimeOut, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  106     unsigned int RegVal;
//  107     unsigned char TmpVal;
//  108     RegVal = uiMicroSeconds / 100;
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  109 
//  110     /*
//  111     NOTE: The supported hardware range is bigger, since the prescaler here
//  112           is always set to 100 us.
//  113     */
//  114     if(RegVal >= 0xfff)
        MOV     A,R6
        SUBB    A,#-0x1
        MOV     A,R7
        SUBB    A,#0xf
        JC      ??SetTimeOut_0
//  115     {
//  116         return STATUS_INVALID_PARAMETER;
        MOV     R2,#0x1
        MOV     R3,#0x1
        SJMP    ??SetTimeOut_1
//  117     }
//  118     RcModifyReg(RC522_REG_TMODE, 1, RC522_BIT_TAUTO);
??SetTimeOut_0:
        ; Setup parameters for call to function RcModifyReg
        MOV     R3,#-0x80
        MOV     R2,#0x1
        MOV     R1,#0x2a
        LCALL   ??RcModifyReg?relay
//  119 
//  120     RcSetReg(RC522_REG_TPRESCALER, 0xa6);
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#-0x5a
        MOV     R1,#0x2b
        LCALL   ??RcSetReg?relay
//  121 
//  122     TmpVal = RcGetReg(RC522_REG_TMODE);
//  123     TmpVal &= 0xf0;
//  124     TmpVal |= 0x02;
//  125     RcSetReg(RC522_REG_TMODE, TmpVal);//82
        ; Setup parameters for call to function RcSetReg
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x2a
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_20:
        ANL     A,#0xf0
        ORL     A,#0x2
        MOV     R2,A
        MOV     R1,#0x2a
        LCALL   ??RcSetReg?relay
//  126 
//  127     RcSetReg(RC522_REG_TRELOADLO, ((unsigned char)(RegVal&0xff)));
        ; Setup parameters for call to function RcSetReg
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x2d
        LCALL   ??RcSetReg?relay
//  128     RcSetReg(RC522_REG_TRELOADHI, ((unsigned char)((RegVal>>8)&0xff)));
        ; Setup parameters for call to function RcSetReg
        MOV     A,R7
        MOV     R2,A
        MOV     R1,#0x2c
        LCALL   ??Subroutine33_0 & 0xFFFF
//  129     return STATUS_SUCCESS;
??CrossCallReturnLabel_55:
        MOV     R3,#0x0
        CFI EndBlock cfiBlock0
??SetTimeOut_1:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  130 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  131   
//  132 
//  133 
//  134 /*************************************************
//  135 Function:       Rc522Init
//  136 Description:
//  137      initialize rc522 as a mifare reader
//  138 Parameter:
//  139      NONE
//  140 Return:
//  141      NONE
//  142 **************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  143 void Rc522Init(void)
Rc522Init:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function Rc522Init
        CODE
//  144 {
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcModifyReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcGetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcGetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, SetTimeOut
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcModifyReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcModifyReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcGetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, SetTimeOut
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, SetTimeOut
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Rc522Init, RcSetReg
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  145     unsigned char RegVal;
//  146 
//  147     RcSetReg(RC522_REG_COMMAND, 0x0F); /*reset the RC522*/
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0xf
        MOV     R1,#0x1
        LCALL   ??RcSetReg?relay
//  148 
//  149     RcSetReg(RC522_REG_TXASK, 0x40); /*force to 100% ASK*/
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x40
        MOV     R1,#0x15
        LCALL   ??RcSetReg?relay
//  150 
//  151     /* disable Crypto1 bit*/
//  152     RcModifyReg(RC522_REG_STATUS2, 0, RC522_BIT_CRYPTO1ON);
        ; Setup parameters for call to function RcModifyReg
        MOV     R3,#0x8
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??RcModifyReg?relay
//  153 
//  154     /* do not touch bits: InvMod in register TxMode */
//  155     RegVal = RcGetReg(RC522_REG_TXMODE);
//  156     RegVal = (unsigned char)(RegVal & RC522_BIT_INVMOD);
//  157     RegVal = (unsigned char)(RegVal | RC522_BIT_CRCEN | (RCO_VAL_RF106K << RC522_SPEED_SHL_VALUE));
//  158     /* TxCRCEn = 1; TxSpeed = x; InvMod, TXMix = 0; TxFraming = 0 */
//  159     RcSetReg(RC522_REG_TXMODE, RegVal);
        ; Setup parameters for call to function RcSetReg
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x12
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     R1,#0x12
        LCALL   ??RcSetReg?relay
//  160 
//  161     /* do not touch bits: RxNoErr in register RxMode */
//  162     RegVal = RcGetReg(RC522_REG_RXMODE);
//  163     RegVal = (unsigned char)(RegVal & RC522_BIT_RXNOERR);
//  164     RegVal = (unsigned char)(RegVal | RC522_BIT_CRCEN | (RCO_VAL_RF106K << RC522_SPEED_SHL_VALUE));
//  165      /* RxCRCEn = 1; RxSpeed = x; RxNoErr, RxMultiple = 0; TxFraming = 0 */
//  166     RcSetReg(RC522_REG_RXMODE, RegVal);
        ; Setup parameters for call to function RcSetReg
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x13
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     R1,#0x13
        LCALL   ??RcSetReg?relay
//  167 
//  168     /* ADDIQ = 10b; FixIQ = 1; RFU = 0; TauRcv = 11b; TauSync = 01b */
//  169     RcSetReg(RC522_REG_DEMOD, 0x6D);
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x6d
        MOV     R1,#0x19
        LCALL   ??RcSetReg?relay
//  170     //RegVal = RcGetReg(RC522_REG_DEMOD);
//  171 
//  172     /* RxGain = 4*/
//  173     RcSetReg(RC522_REG_RFCFG, 0x48);
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x48
        MOV     R1,#0x26
        LCALL   ??RcSetReg?relay
//  174     //RegVal = RcGetReg(RC522_REG_RFCFG);///test88888
//  175 
//  176     /* do settings common for all functions */
//  177     RcSetReg(RC522_REG_RXTRESHOLD, 0x55);    /* MinLevel = 5; CollLevel = 5 */
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x55
        MOV     R1,#0x18
        LCALL   ??RcSetReg?relay
//  178    
//  179     
//  180     RcSetReg(RC522_REG_MODWIDTH, 0x26);      /* Modwidth = 0x26 */
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x26
        MOV     R1,#0x24
        LCALL   ??RcSetReg?relay
//  181     RcSetReg(RC522_REG_GSN, 0xF0 | 0x04);     /* CWGsN = 0xF; ModGsN = 0x4 */
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#-0xc
        MOV     R1,#0x27
        LCALL   ?Subroutine12 & 0xFFFF
//  182 
//  183     /* Set the timer to auto mode, 5ms using operation control commands before HF is switched on to
//  184      * guarantee Iso14443-3 compliance of Polling procedure
//  185      */
//  186     SetTimeOut(5000);
//  187 
//  188     /* Activate the field  */
//  189     RcModifyReg(RC522_REG_TXCONTROL, 1, RC522_BIT_TX2RFEN | RC522_BIT_TX1RFEN);
??CrossCallReturnLabel_16:
        ; Setup parameters for call to function RcModifyReg
        MOV     R3,#0x3
        MOV     R2,#0x1
        MOV     R1,#0x14
        LCALL   ??RcModifyReg?relay
//  190 
//  191     /* start timer manually to check the initial waiting time */
//  192     RcModifyReg(RC522_REG_CONTROL, 1, RC522_BIT_TSTARTNOW);
        ; Setup parameters for call to function RcModifyReg
        MOV     R3,#0x40
        MOV     R2,#0x1
        MOV     R1,#0xc
        LCALL   ??RcModifyReg?relay
//  193 
//  194     /*
//  195      * After switching on the timer wait until the timer interrupt occures, so that
//  196      * the field is on and the 5ms delay have been passed.
//  197      */
//  198     do {
//  199         RegVal = RcGetReg(RC522_REG_COMMIRQ);
??Rc522Init_0:
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x4
        LCALL   ?Subroutine14 & 0xFFFF
//  200     }
//  201     while(!(RegVal & RC522_BIT_TIMERI));
??CrossCallReturnLabel_21:
        MOV     C,0xE0 /* A   */.0
        JNC     ??Rc522Init_0
//  202 
//  203 
//  204     /* Clear the status flag afterwards */
//  205     RcSetReg(RC522_REG_COMMIRQ, RC522_BIT_TIMERI);
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x1
        MOV     R1,#0x4
        LCALL   ?Subroutine12 & 0xFFFF
//  206 
//  207     /*
//  208      * Reset timer 1 ms using operation control commands (AutoMode and Prescaler are the same)
//  209      * set reload value
//  210      */
//  211     SetTimeOut(5000);
//  212 
//  213     RcSetReg(RC522_REG_WATERLEVEL, 0x1A);
??CrossCallReturnLabel_17:
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x1a
        MOV     R1,#0xb
        LCALL   ??RcSetReg?relay
//  214     RcSetReg(RC522_REG_TXSEL, 0x10);
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x10
        MOV     R1,#0x16
        LCALL   ??RcSetReg?relay
//  215     
//  216     RcSetReg(RC522_REG_RXSEL, 0x87);        /* Default 0x84  7..Rx Waite (7 x 9,4us) */
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#-0x79
        MOV     R1,#0x17
        LCALL   ??Subroutine33_0 & 0xFFFF
//  217 
//  218     /* Activate receiver for communication
//  219        The RcvOff bit and the PowerDown bit are cleared, the command is not changed. */
//  220     RcSetReg(RC522_REG_COMMAND, RC522_CMD_IDLE);
??CrossCallReturnLabel_56:
        MOV     R1,#0x1
        LCALL   ??RcSetReg?relay
//  221 
//  222     /* Set timeout for REQA, ANTICOLL, SELECT to 200us */
//  223     SetTimeOut(2000);
        ; Setup parameters for call to function SetTimeOut
        MOV     R2,#-0x30
        MOV     R3,#0x7
        LCALL   ??SetTimeOut?relay
//  224     RcSetReg(RC522_REG_ANALOGTEST,0xCD);
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#-0x33
        MOV     R1,#0x38
        LCALL   ??RcSetReg?relay
        CFI EndBlock cfiBlock2
//  225 
//  226 } 
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond5) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond5) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond5) CFA_SP SP+-5
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        LCALL   ??RcGetReg?relay
        MOV     A,R1
        ANL     A,#0x8
        ORL     A,#0x80
        MOV     R2,A
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond8) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond8) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond8) CFA_SP SP+-5
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        LCALL   ??RcSetReg?relay
        ; Setup parameters for call to function SetTimeOut
        ; Setup parameters for call to function SetTimeOut
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??SetTimeOut?relay
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
//  227 
//  228 
//  229 /*************************************************
//  230 Function:       RF Reset
//  231 Description:
//  232      halt the current selected card
//  233 Parameter:
//  234      NONE
//  235 Return:
//  236      NONE
//  237 **************************************************/
//  238 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  239 void Rc522RFReset(unsigned char ms)
Rc522RFReset:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function Rc522RFReset
        CODE
//  240 {
        FUNCALL Rc522RFReset, Rc522Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  241   //unsigned int j;
//  242   //RcSetReg(RC522_REG_COMMAND, 0x0f); // RC522 Soft Reset
//  243 	//Timer1_Delay_ms(ms);
//  244   //      for (j=0;j<(100*ms);j++)
//  245   //         Delay(200);
//  246 	Rc522Init();
        ; Setup parameters for call to function Rc522Init
        LCALL   ??Rc522Init?relay
//  247 }
        SJMP    ?Subroutine1
        CFI EndBlock cfiBlock10
//  248 
//  249 
//  250 /*************************************************
//  251 Function:       M522PcdCmd
//  252 Description:
//  253      implement a command
//  254 Parameter:
//  255      cmd            command code
//  256      ExchangeBuf    saved the data will be send to card and the data responed from the card
//  257      info           some information for the command
//  258 Return:
//  259      short      status of implement
//  260 **************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  261 short  M522PcdCmd(unsigned char cmd, unsigned char *ExchangeBuf, MfCmdInfo  *info)
M522PcdCmd:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function M522PcdCmd
        CODE
//  262 {
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcGetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcGetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcGetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcModifyReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcGetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcGetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcGetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcModifyReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcModifyReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcGetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcGetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcGetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcGetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcGetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL M522PcdCmd, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x11
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        ; Saved register size: 17
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  263     short          status    = STATUS_SUCCESS;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  264 
//  265     unsigned char  commIrqEn   = 0;
        MOV     ?V0 + 5,R6
//  266     unsigned char  divIrqEn    = 0;
//  267     unsigned char  waitForComm = RC522_BIT_ERRI | RC522_BIT_TXI;
        MOV     ?V0 + 3,#0x42
//  268     unsigned char  waitForDiv  = 0;
//  269     unsigned char  doReceive   = 0;
        MOV     ?V0 + 4,R6
//  270     unsigned char  i;
//  271     unsigned char  getRegVal,setRegVal;
//  272 
//  273     //unsigned char  nbytes, nbits;
//  274     unsigned int counter;
//  275 
//  276     /*remove all Interrupt request flags that are used during function,
//  277     keep all other like they are*/
//  278     RcSetReg(RC522_REG_COMMIRQ, waitForComm);
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x42
        LCALL   ?Subroutine8 & 0xFFFF
//  279     RcSetReg(RC522_REG_DIVIRQ, waitForDiv);
//  280     RcSetReg(RC522_REG_FIFOLEVEL, RC522_BIT_FLUSHBUFFER);
//  281 
//  282     /*disable command or set to transceive*/
//  283     getRegVal = RcGetReg(RC522_REG_COMMAND);
??CrossCallReturnLabel_6:
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x1
        LCALL   ?Subroutine11 & 0xFFFF
//  284     if(cmd == RC522_CMD_TRANSCEIVE)
??CrossCallReturnLabel_12:
        MOV     A,#-0x10
        ANL     A,?V0 + 8
        MOV     R2,A
        MOV     A,#0xc
        XRL     A,?V0 + 2
        JNZ     ??M522PcdCmd_0
//  285     {
//  286         /*re-init the transceive command*/
//  287         setRegVal = (getRegVal & ~RC522_MASK_COMMAND) | RC522_CMD_TRANSCEIVE;
//  288         RcSetReg(RC522_REG_COMMAND, setRegVal);
        ; Setup parameters for call to function RcSetReg
        MOV     A,#0xc
        ORL     A,R2
        MOV     R2,A
//  289     }
//  290     else
//  291     {
//  292         /*clear current command*/
//  293         setRegVal = (getRegVal & ~RC522_MASK_COMMAND);
//  294         RcSetReg(RC522_REG_COMMAND, setRegVal);
??M522PcdCmd_0:
        ; Setup parameters for call to function RcSetReg
        MOV     R1,#0x1
        LCALL   ??RcSetReg?relay
//  295     }
//  296     MpIsrInfo = info;
        MOV     DPTR,#MpIsrInfo
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  297     switch(cmd)
        MOV     A,?V0 + 2
        JZ      ??M522PcdCmd_1
        ADD     A,#-0x3
        JZ      ??M522PcdCmd_1
        DEC     A
        JZ      ??M522PcdCmd_2
        ADD     A,#-0x4
        JZ      ??M522PcdCmd_3
        ADD     A,#-0x4
        JZ      ??M522PcdCmd_3
        ADD     A,#-0x2
        JZ      ??M522PcdCmd_4
        DEC     A
        JNZ     ??M522PcdCmd_5
//  298     {
//  299        case RC522_CMD_IDLE:         /* values are 00, so return immediately after all bytes written to FIFO */
//  300             waitForComm = 0;
??M522PcdCmd_1:
        MOV     ?V0 + 3,R6
//  301             waitForDiv  = 0;
//  302             break;
//  303         case RC522_CMD_CALCCRC:      /* values are 00, so return immediately after all bytes written to FIFO */
//  304             waitForComm = 0;
//  305             waitForDiv  = 0;
//  306             break;
//  307         case RC522_CMD_TRANSMIT:
//  308             commIrqEn = RC522_BIT_TXI | RC522_BIT_TIMERI;
//  309             waitForComm = RC522_BIT_TXI;
//  310             break;
//  311         case RC522_CMD_RECEIVE:
//  312             commIrqEn = RC522_BIT_RXI | RC522_BIT_TIMERI | RC522_BIT_ERRI;
//  313             waitForComm = RC522_BIT_RXI | RC522_BIT_TIMERI | RC522_BIT_ERRI;
//  314             doReceive = 1;
//  315             break;
//  316         case RC522_CMD_TRANSCEIVE:
//  317             commIrqEn = RC522_BIT_RXI | RC522_BIT_TIMERI | RC522_BIT_ERRI;
//  318             waitForComm = RC522_BIT_RXI | RC522_BIT_TIMERI | RC522_BIT_ERRI;
//  319             doReceive = 1;
//  320             break;
//  321         case RC522_CMD_AUTHENT:
//  322             commIrqEn = RC522_BIT_IDLEI | RC522_BIT_TIMERI | RC522_BIT_ERRI;
//  323             waitForComm = RC522_BIT_IDLEI | RC522_BIT_TIMERI | RC522_BIT_ERRI;
//  324             break;
//  325         case RC522_CMD_SOFTRESET:    /* values are 0x00 for IrqEn and for waitFor, nothing to do */
//  326             waitForComm = 0;
//  327             waitForDiv  = 0;
//  328             break;
//  329         default:
//  330             status = STATUS_UNSUPPORTED_COMMAND;
//  331     }
//  332     if(status == STATUS_SUCCESS)
//  333     {
//  334         /* activate necessary communication Irq's */
//  335         getRegVal = RcGetReg(RC522_REG_COMMIEN);
//  336         RcSetReg(RC522_REG_COMMIEN, getRegVal | commIrqEn);
??M522PcdCmd_6:
        ; Setup parameters for call to function RcSetReg
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x2
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_22:
        ORL     A,?V0 + 5
        MOV     R2,A
        MOV     R1,#0x2
        LCALL   ??RcSetReg?relay
//  337 
//  338         /* activate necessary other Irq's */
//  339         getRegVal = RcGetReg(RC522_REG_DIVIEN);
//  340         RcSetReg(RC522_REG_DIVIEN, getRegVal | divIrqEn);
        ; Setup parameters for call to function RcSetReg
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x3
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     R2,A
        MOV     R1,#0x3
        LCALL   ??RcSetReg?relay
//  341 
//  342         /*write data to FIFO*/
//  343         for(i=0; i<MpIsrInfo->nBytesToSend; i++)
        MOV     ?V0 + 8,R6
        SJMP    ??M522PcdCmd_7
??M522PcdCmd_2:
        MOV     ?V0 + 5,#0x41
        MOV     ?V0 + 3,#0x40
        SJMP    ??M522PcdCmd_6
??M522PcdCmd_3:
        MOV     ?V0 + 5,#0x23
        MOV     ?V0 + 3,#0x23
        MOV     ?V0 + 4,#0x1
        SJMP    ??M522PcdCmd_6
??M522PcdCmd_4:
        MOV     ?V0 + 5,#0x13
        MOV     ?V0 + 3,#0x13
        SJMP    ??M522PcdCmd_6
??M522PcdCmd_5:
        INC     R6
        INC     R6
        INC     R6
        INC     R7
        SJMP    ??M522PcdCmd_8
//  344         {
//  345             RcSetReg(RC522_REG_FIFODATA, ExchangeBuf[i]);
??M522PcdCmd_9:
        ; Setup parameters for call to function RcSetReg
        LCALL   ?Subroutine22 & 0xFFFF
//  346         }
??CrossCallReturnLabel_39:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R1,#0x9
        LCALL   ??RcSetReg?relay
        INC     ?V0 + 8
??M522PcdCmd_7:
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_51:
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 8
        CLR     C
        SUBB    A,R0
        JC      ??M522PcdCmd_9
//  347 
//  348         /*do seperate action if command to be executed is transceive*/
//  349         if(cmd == RC522_CMD_TRANSCEIVE)
        MOV     A,#0xc
        XRL     A,?V0 + 2
        JNZ     ??M522PcdCmd_10
//  350         {
//  351             /*TRx is always an endless loop, Initiator and Target must set STARTSEND.*/
//  352             RcModifyReg(RC522_REG_BITFRAMING, 1, RC522_BIT_STARTSEND);
        ; Setup parameters for call to function RcModifyReg
        MOV     R3,#-0x80
        MOV     R2,#0x1
        MOV     R1,#0xd
        LCALL   ??RcModifyReg?relay
        SJMP    ??M522PcdCmd_11
//  353         }
//  354         else
//  355         {
//  356             getRegVal = RcGetReg(RC522_REG_COMMAND);
//  357             RcSetReg(RC522_REG_COMMAND, (getRegVal & ~RC522_MASK_COMMAND) | cmd);
??M522PcdCmd_10:
        ; Setup parameters for call to function RcSetReg
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x1
        LCALL   ?Subroutine14 & 0xFFFF
//  358         }
??CrossCallReturnLabel_24:
        ANL     A,#0xf0
        ORL     A,?V0 + 2
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   ??RcSetReg?relay
//  359 
//  360         /*polling mode*/
//  361         getRegVal = 0;
//  362         setRegVal = 0;
??M522PcdCmd_11:
        MOV     ?V0 + 8,R6
//  363         counter = 0; /*Just for debug*/
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R6
//  364         while(!(waitForComm ? (waitForComm & setRegVal) : 1) ||
//  365               !(waitForDiv ? (waitForDiv & getRegVal) :1))
        MOV     A,?V0 + 3
        JZ      ??M522PcdCmd_12
??M522PcdCmd_13:
        MOV     A,?V0 + 3
        ANL     A,?V0 + 8
        JNZ     ??M522PcdCmd_12
//  366         {
//  367             setRegVal = RcGetReg(RC522_REG_COMMIRQ);
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x4
        LCALL   ?Subroutine11 & 0xFFFF
//  368             getRegVal = RcGetReg(RC522_REG_DIVIRQ);
??CrossCallReturnLabel_13:
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x5
        LCALL   ??RcGetReg?relay
//  369             counter ++;
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
//  370             if(counter > 0x0100)
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x1
        MOV     A,?V0 + 1
        SUBB    A,#0x1
        JC      ??M522PcdCmd_13
//  371                 break;
//  372         }
//  373         /*store IRQ bits for clearance afterwards*/
//  374         waitForComm = (unsigned char)(waitForComm & setRegVal);
??M522PcdCmd_12:
        MOV     A,?V0 + 8
        ANL     ?V0 + 3,A
//  375         waitForDiv  = (unsigned char)(waitForDiv & getRegVal);
//  376 
//  377         /*set status to Timer Interrupt occurence*/
//  378         if (setRegVal & RC522_BIT_TIMERI)
        MOV     C,0xE0 /* A   */.0
        JNC     ??M522PcdCmd_8
//  379         {
//  380             status = STATUS_IO_TIMEOUT;
        INC     R6
//  381         }
//  382     }
//  383 
//  384     /*disable all interrupt sources*/
//  385     RcModifyReg(RC522_REG_COMMIEN, 0, commIrqEn);
??M522PcdCmd_8:
        ; Setup parameters for call to function RcModifyReg
        MOV     R3,?V0 + 5
        MOV     R2,#0x0
        MOV     R1,#0x2
        LCALL   ??RcModifyReg?relay
//  386 
//  387     RcModifyReg(RC522_REG_DIVIEN, 0, divIrqEn);
        ; Setup parameters for call to function RcModifyReg
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x3
        LCALL   ??RcModifyReg?relay
//  388 
//  389     if(doReceive && (status == STATUS_SUCCESS))
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??M522PcdCmd_14 & 0xFFFF
        MOV     A,R6
        ORL     A,R7
        JZ      $+5
        LJMP    ??M522PcdCmd_14 & 0xFFFF
//  390     {
//  391         /*read number of bytes received (used for error check and correct transaction*/
//  392         MpIsrInfo->nBytesReceived = RcGetReg(RC522_REG_FIFOLEVEL);
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0xa
        LCALL   ??RcGetReg?relay
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     A,R1
        MOVX    @DPTR,A
//  393         getRegVal = RcGetReg(RC522_REG_CONTROL);
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0xc
        LCALL   ?Subroutine11 & 0xFFFF
//  394         MpIsrInfo->nBitsReceived = (unsigned char)(getRegVal & 0x07);
??CrossCallReturnLabel_14:
        MOV     A,#0x7
        ANL     A,?V0 + 8
        MOV     R2,A
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_36:
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  395 
//  396         getRegVal = RcGetReg(RC522_REG_ERROR);
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x6
        LCALL   ?Subroutine11 & 0xFFFF
//  397         /*set status information if error occured*/
//  398         if(getRegVal)
??CrossCallReturnLabel_15:
        JNZ     $+5
        LJMP    ??M522PcdCmd_15 & 0xFFFF
//  399         {
//  400             if(getRegVal & RC522_BIT_COLLERR)
        MOV     C,0xE0 /* A   */.3
        JNC     ??M522PcdCmd_16
//  401                 status = STATUS_COLLISION_ERROR;         /* Collision Error */
        MOV     R6,#0x6
        SJMP    ??M522PcdCmd_17
//  402             else if(getRegVal & RC522_BIT_PARITYERR)
??M522PcdCmd_16:
        MOV     C,0xE0 /* A   */.1
        JNC     ??M522PcdCmd_18
//  403                 status = STATUS_PARITY_ERROR;            /* Parity Error */
        MOV     R6,#0x3
??M522PcdCmd_17:
        MOV     R7,#0x0
//  404 
//  405             if(getRegVal & RC522_BIT_PROTERR)
??M522PcdCmd_18:
        MOV     C,0xE0 /* A   */.0
        JNC     ??M522PcdCmd_19
//  406                 status = STATUS_PROTOCOL_ERROR;          /* Protocoll Error */
        MOV     R6,#0xb
??M522PcdCmd_20:
        MOV     R7,#0x0
        SJMP    ??M522PcdCmd_21
//  407             else if(getRegVal & RC522_BIT_BUFFEROVFL)
??M522PcdCmd_19:
        MOV     C,0xE0 /* A   */.4
        JNC     ??M522PcdCmd_22
//  408                 status = STATUS_BUFFER_OVERFLOW;         /* BufferOverflow Error */
        MOV     R6,#0x9
        SJMP    ??M522PcdCmd_20
//  409             else if(getRegVal & RC522_BIT_CRCERR)
??M522PcdCmd_22:
        MOV     C,0xE0 /* A   */.2
        JNC     ??M522PcdCmd_23
//  410             {   /* CRC Error */
//  411                 if(MpIsrInfo->nBytesReceived == 0x01 &&
//  412                     (MpIsrInfo->nBitsReceived == 0x04 ||
//  413                      MpIsrInfo->nBitsReceived == 0x00))
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_37:
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??M522PcdCmd_24
        MOV     DPTR,#MpIsrInfo
        MOVX    A,@DPTR
        ADD     A,#0x5
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_41:
        XRL     A,#0x4
        JNZ     ??M522PcdCmd_25
        INC     DPTR
        MOVX    A,@DPTR
??M522PcdCmd_25:
        JZ      ??M522PcdCmd_26
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine34_0 & 0xFFFF
??CrossCallReturnLabel_57:
        JNZ     ??M522PcdCmd_24
//  414                 {   /* CRC Error and only one byte received might be a Mifare (N)ACK */
//  415                     ExchangeBuf[0] = RcGetReg(RC522_REG_FIFODATA);
??M522PcdCmd_26:
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x9
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    @DPTR,A
//  416                     MpIsrInfo->nBytesReceived = 1;
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_38:
        MOV     A,#0x1
        MOVX    @DPTR,A
//  417                     status = STATUS_ACK_SUPPOSED;        /* (N)ACK supposed */
        MOV     R6,#0x2
        MOV     R7,#0x2
        SJMP    ??M522PcdCmd_21
//  418                 }
//  419                 else
//  420                     status = STATUS_CRC_ERROR;           /* CRC Error */    ///////////////
??M522PcdCmd_24:
        MOV     R6,#0x2
        SJMP    ??M522PcdCmd_20
//  421             }
//  422             else if(getRegVal & RC522_BIT_TEMPERR)
??M522PcdCmd_23:
        MOV     C,0xE0 /* A   */.6
        JNC     ??M522PcdCmd_21
//  423                 status = STATUS_RC522_TEMP_ERROR;       /* Temperature Error */
        MOV     R6,#0x4
        MOV     R7,#0x7e
//  424             if(getRegVal & RC522_BIT_WRERR)
??M522PcdCmd_21:
        MOV     A,?V0 + 8
        MOV     C,0xE0 /* A   */.7
        JNC     ??M522PcdCmd_27
//  425                 status = STATUS_FIFO_WRITE_ERROR;        /* Error Writing to FIFO */
        MOV     R6,#0xd
        SJMP    ??M522PcdCmd_28
//  426             if(status == STATUS_SUCCESS)
??M522PcdCmd_27:
        MOV     A,R6
        ORL     A,R7
        JNZ     ??M522PcdCmd_29
//  427                 status = STATUS_ERROR_NY_IMPLEMENTED;    /* Error not yet implemented, shall never occur! */
        MOV     R6,#0xc
??M522PcdCmd_28:
        MOV     R7,#0x0
//  428 
//  429             /* if an error occured, clear error register before IRQ register */
//  430             RcSetReg(RC522_REG_ERROR, 0);
??M522PcdCmd_29:
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x0
        MOV     R1,#0x6
        LCALL   ??RcSetReg?relay
//  431         }
//  432 
//  433         /*read data from FIFO and set response parameter*/
//  434         if(status != STATUS_ACK_SUPPOSED)
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??M522PcdCmd_30
        MOV     A,#0x2
        XRL     A,R7
??M522PcdCmd_30:
        JZ      ??M522PcdCmd_14
//  435         {
//  436             for(i=0; i<MpIsrInfo->nBytesReceived; i++)
??M522PcdCmd_15:
        MOV     ?V0 + 8,#0x0
        SJMP    ??M522PcdCmd_31
//  437             {
//  438                 ExchangeBuf[i] = RcGetReg(RC522_REG_FIFODATA);
??M522PcdCmd_32:
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x9
        LCALL   ??RcGetReg?relay
        LCALL   ?Subroutine22 & 0xFFFF
//  439             }
??CrossCallReturnLabel_40:
        MOV     A,R1
        MOVX    @DPTR,A
        INC     ?V0 + 8
??M522PcdCmd_31:
        MOV     DPTR,#MpIsrInfo
        MOVX    A,@DPTR
        ADD     A,#0x4
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     R2,A
        MOV     A,?V0 + 8
        CLR     C
        SUBB    A,R2
        JC      ??M522PcdCmd_32
//  440             /*in case of incomplete last byte reduce number of complete bytes by 1*/
//  441             if(MpIsrInfo->nBitsReceived && MpIsrInfo->nBytesReceived)
        MOV     DPTR,#MpIsrInfo
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??M522PcdCmd_14
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JZ      ??M522PcdCmd_14
//  442                 MpIsrInfo->nBytesReceived --;
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  443         }
//  444     }
//  445     RcSetReg(RC522_REG_COMMIRQ, waitForComm);
??M522PcdCmd_14:
        ; Setup parameters for call to function RcSetReg
        MOV     R2,?V0 + 3
        LCALL   ?Subroutine8 & 0xFFFF
//  446     RcSetReg(RC522_REG_DIVIRQ, waitForDiv);
//  447     RcSetReg(RC522_REG_FIFOLEVEL, RC522_BIT_FLUSHBUFFER);
//  448     RcSetReg(RC522_REG_COMMIRQ, RC522_BIT_TIMERI);
??CrossCallReturnLabel_7:
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x1
        LCALL   ?Subroutine27 & 0xFFFF
//  449     RcSetReg(RC522_REG_BITFRAMING, 0);
??CrossCallReturnLabel_53:
        MOV     R1,#0xd
        LCALL   ??RcSetReg?relay
//  450     return status;
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R7,#0x9
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock11
//  451 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_53
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_6
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond13) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_7
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOV     R1,#0x4
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_55
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_56
        CFI (cfiCond17) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond17) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond17) CFA_SP SP+-5
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_53
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_6
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_54, ??CrossCallReturnLabel_7
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        LCALL   ??RcSetReg?relay
        ; Setup parameters for call to function RcSetReg
        ; Setup parameters for call to function RcSetReg
        ; Setup parameters for call to function RcSetReg
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x0
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_41
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_42
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_39
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_40
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker27 Using cfiCommon1
        CFI (cfiPicker27) NoFunction
        CFI (cfiPicker27) Picker
        MOV     ?V0 + 0,?V0 + 8
        MOV     A,?V0 + 6
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
        CFI Block cfiCond28 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_35
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_36
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_37
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_38
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_52:
        INC     DPTR
        RET
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_51
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_35
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_36
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_37
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_52, ??CrossCallReturnLabel_38
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOV     DPTR,#MpIsrInfo
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
        CFI Block cfiCond39 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_21
        CFI (cfiCond40) DPL0 Frame(CFA_SP, 4)
        CFI (cfiCond40) DPH0 Frame(CFA_SP, 5)
        CFI (cfiCond40) CFA_SP SP+-5
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond41) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond41) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond41) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond41) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        LCALL   ??RcGetReg?relay
        MOV     A,R1
        RET
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_12
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond50 Using cfiCommon0
        CFI (cfiCond50) NoFunction
        CFI (cfiCond50) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond50) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond50) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond50) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond50) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond50) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond50) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond50) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond50) CFA_SP SP+0
        CFI (cfiCond50) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker51 Using cfiCommon1
        CFI (cfiPicker51) NoFunction
        CFI (cfiPicker51) Picker
        LCALL   ??RcGetReg?relay
        MOV     A,R1
        MOV     ?V0 + 8,A
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiCond50
        CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond52 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond53 Using cfiCommon0
        CFI (cfiCond53) NoFunction
        CFI (cfiCond53) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond53) CFA_SP SP+0
        CFI (cfiCond53) CFA_XSP16 add(XSP16, 17)
        CFI Block cfiPicker54 Using cfiCommon1
        CFI (cfiPicker54) NoFunction
        CFI (cfiPicker54) Picker
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_54:
        MOV     R1,#0x5
        LCALL   ??RcSetReg?relay
        ; Setup parameters for call to function RcSetReg
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#-0x80
        MOV     R1,#0xa
        LCALL   ??RcSetReg?relay
        RET
        CFI EndBlock cfiCond52
        CFI EndBlock cfiCond53
        CFI EndBlock cfiPicker54
//  452 
//  453 /*************************************************
//  454 Function:       Request
//  455 Description:
//  456      REQA, request to see if have a ISO14443A card in the field
//  457 Parameter:
//  458      req_code   command code(ISO14443_3_REQALL or ISO14443_3_REQIDL)
//  459      atq        the buffer to save the answer to request from the card
//  460 Return:
//  461      short      status of implement
//  462 **************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  463 short Request(unsigned char req_code, unsigned char *atq)
Request:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function Request
        CODE
//  464 {
        FUNCALL Request, RcModifyReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Request, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Request, RcModifyReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Request, RcModifyReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Request, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Request, SetTimeOut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Request, M522PcdCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Request, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  465    char  status = STATUS_SUCCESS;
//  466 
//  467    /************* initialize *****************/
//  468    RcModifyReg(RC522_REG_STATUS2, 0, RC522_BIT_CRYPTO1ON);  /* disable Crypto if activated before */
        ; Setup parameters for call to function RcModifyReg
        MOV     R3,#0x8
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??RcModifyReg?relay
//  469    RcSetReg(RC522_REG_COLL, RC522_BIT_VALUESAFTERCOLL);  	/* active values after coll */
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#-0x80
        MOV     R1,#0xe
        LCALL   ??RcSetReg?relay
//  470    RcModifyReg(RC522_REG_TXMODE, 0, RC522_BIT_CRCEN);  		/* disable TxCRC and RxCRC */
        ; Setup parameters for call to function RcModifyReg
        MOV     R3,#-0x80
        MOV     R2,#0x0
        LCALL   ?Subroutine10 & 0xFFFF
//  471    RcModifyReg(RC522_REG_RXMODE, 0, RC522_BIT_CRCEN);
//  472    RcSetReg(RC522_REG_BITFRAMING, REQUEST_BITS);
??CrossCallReturnLabel_10:
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x7
        LCALL   ?Subroutine5 & 0xFFFF
//  473 
//  474    /* set necessary parameters for transmission */
//  475    ResetInfo(MInfo);
//  476    SerBuffer[0] = req_code;
??CrossCallReturnLabel_0:
        MOV     A,?V0 + 2
        MOV     DPTR,#SerBuffer
        MOVX    @DPTR,A
//  477    MInfo.nBytesToSend   = 1;
        MOV     DPTR,#MInfo + 3
        MOV     A,#0x1
        MOVX    @DPTR,A
//  478 
//  479    /* Set timeout for REQA, ANTICOLL, SELECT*/
//  480     SetTimeOut(400);
        ; Setup parameters for call to function SetTimeOut
        MOV     R2,#-0x70
        MOV     R3,A
        LCALL   ?Subroutine9 & 0xFFFF
//  481 
//  482    status = M522PcdCmd(RC522_CMD_TRANSCEIVE,
//  483                       SerBuffer,
//  484                       &MInfo);
??CrossCallReturnLabel_8:
        MOV     ?V0 + 0,A
//  485    if(status == STATUS_SUCCESS || status == STATUS_COLLISION_ERROR)
        JZ      ??Request_0
        MOV     A,#0x6
        XRL     A,?V0 + 0
        JNZ     ??Request_1
//  486    {
//  487        if(MInfo.nBytesReceived != ATQA_LENGTH || MInfo.nBitsReceived != 0x00)
??Request_0:
        MOV     DPTR,#MInfo + 4
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??Request_2
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_58:
        JZ      ??Request_3
//  488        {
//  489            status = STATUS_PROTOCOL_ERROR;
??Request_2:
        MOV     ?V0 + 0,#0xb
        SJMP    ??Request_4
//  490        }
//  491        else
//  492        {
//  493            memcpy(atq,SerBuffer,2);
??Request_3:
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 4,#0x2
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#SerBuffer & 0xff
        MOV     R5,#(SerBuffer >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??Subroutine36_0 & 0xFFFF
//  494        }
//  495    }
??CrossCallReturnLabel_65:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        SJMP    ??Request_4
//  496    else
//  497    {   /* reset atqa parameter */
//  498        atq[0] = 0x00;
??Request_1:
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
//  499        atq[1] = 0x00;
        INC     DPTR
        MOVX    @DPTR,A
//  500    }
//  501    //RcSetReg(RC522_REG_BITFRAMING, 0);
//  502    return status;
??Request_4:
        MOV     R2,?V0 + 0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock55
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  503 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock56

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
        CFI Block cfiCond57 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_58
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond58 Using cfiCommon0
        CFI (cfiCond58) NoFunction
        CFI (cfiCond58) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond58) CFA_SP SP+0
        CFI (cfiCond58) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker59 Using cfiCommon1
        CFI (cfiPicker59) NoFunction
        CFI (cfiPicker59) Picker
        INC     DPTR
        CFI EndBlock cfiCond57
        CFI EndBlock cfiCond58
        CFI EndBlock cfiPicker59
        REQUIRE ??Subroutine34_0
        ; // Fall through to label ??Subroutine34_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine34_0:
        CFI Block cfiCond60 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_57
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 17)
        CFI Block cfiCond61 Using cfiCommon0
        CFI (cfiCond61) NoFunction
        CFI (cfiCond61) Conditional ??CrossCallReturnLabel_58
        CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond61) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond61) CFA_SP SP+0
        CFI (cfiCond61) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond62 Using cfiCommon0
        CFI (cfiCond62) NoFunction
        CFI (cfiCond62) Conditional ??CrossCallReturnLabel_59
        CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond62) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond62) CFA_SP SP+0
        CFI (cfiCond62) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker63 Using cfiCommon1
        CFI (cfiPicker63) NoFunction
        CFI (cfiPicker63) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
        CFI EndBlock cfiCond60
        CFI EndBlock cfiCond61
        CFI EndBlock cfiCond62
        CFI EndBlock cfiPicker63
//  504 
//  505 /*************************************************
//  506 Function:       CascAnticoll
//  507 Description:
//  508      Functions to split anticollission and select internally.
//  509      NOTE: this founction is used internal only, and cannot call by application program
//  510 Parameter:
//  511      sel_code   command code
//  512      bitcount   the bit counter of known UID
//  513      snr        the UID have known
//  514 Return:
//  515      short      status of implement
//  516 **************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  517 short CascAnticoll(unsigned char sel_code,
CascAnticoll:
        CFI Block cfiBlock64 Using cfiCommon0
        CFI Function CascAnticoll
        CODE
//  518                    unsigned char bitcount,
//  519                    unsigned char *snr)
//  520 {
        FUNCALL CascAnticoll, RcModifyReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CascAnticoll, RcModifyReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CascAnticoll, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CascAnticoll, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CascAnticoll, SetTimeOut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CascAnticoll, M522PcdCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CascAnticoll, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL CascAnticoll, RcSetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
        MOV     ?V0 + 10,R1
        MOV     ?V0 + 2,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  521     short status = STATUS_SUCCESS;
//  522 
//  523     unsigned char  i;
//  524     unsigned char  complete = 0; /* signs end of anticollission loop */
//  525     unsigned char  rbits    = 0; /* number of total received bits */
//  526     unsigned char  nbits    = 0; /* */
//  527     unsigned char  nbytes   = 0; /* */
//  528     unsigned char  byteOffset;   /* stores offset for ID copy if uncomplete last byte was sent */
//  529 
//  530     /* initialise relvant bytes in internal buffer */
//  531     for(i=2;i<7;i++)
//  532         SerBuffer[i] = 0x00;
        CLR     A
        MOV     DPTR,#SerBuffer + 2
        MOV     R0,#0x5
??CascAnticoll_0:
        MOVX    @DPTR,A
        INC     DPTR
        DJNZ    R0,??CascAnticoll_0
//  533 
//  534     /* disable TxCRC and RxCRC */
//  535     RcModifyReg(RC522_REG_TXMODE, 0, RC522_BIT_CRCEN);
        ; Setup parameters for call to function RcModifyReg
        MOV     R3,#-0x80
        MOV     R2,A
        LCALL   ?Subroutine10 & 0xFFFF
//  536     RcModifyReg(RC522_REG_RXMODE, 0, RC522_BIT_CRCEN);
//  537 
//  538     /* activate deletion of bits after coll */
//  539     RcSetReg(RC522_REG_COLL, 0);
??CrossCallReturnLabel_11:
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x0
        MOV     R1,#0xe
        LCALL   ??RcSetReg?relay
        SJMP    ??CascAnticoll_1
//  540 
//  541     /* init parameters for anticollision */
//  542     while(!complete && (status == STATUS_SUCCESS))
//  543     {
//  544          /* if there is a communication problem on the RF interface, bcnt
//  545             could be larger than 32 - folowing loops will be defective. */
//  546         if(bitcount > SINGLE_UID_LENGTH)
//  547         {
//  548             status = STATUS_INVALID_PARAMETER;
//  549             continue;
//  550         }
//  551 
//  552         /* prepare data length */
//  553         nbits = (unsigned char)(bitcount % BITS_PER_BYTE);
//  554         nbytes = (unsigned char)(bitcount / BITS_PER_BYTE);
//  555         if(nbits)
//  556             nbytes++;
//  557 
//  558         /* prepare data buffer */
//  559         SerBuffer[0] = sel_code;
//  560         SerBuffer[1] = (unsigned char)(NVB_MIN_PARAMETER + ((bitcount / BITS_PER_BYTE) << UPPER_NIBBLE_SHIFT) + nbits);
//  561         for(i=0;i<nbytes;i++)
//  562             SerBuffer[2+i] = snr[i];   /* copy serial number to tranmit buffer */
//  563 
//  564         /* set TxLastBits and RxAlign to number of bits sent */
//  565         RcSetReg(RC522_REG_BITFRAMING, (unsigned char)((nbits << UPPER_NIBBLE_SHIFT) | nbits));
//  566 
//  567         /* prepare data for common transceive */
//  568         ResetInfo(MInfo);
//  569         MInfo.nBytesToSend   = (unsigned char)(nbytes + 2);
//  570         SetTimeOut(1000);
//  571         //SetTimeOut(10000);
//  572         status = M522PcdCmd(RC522_CMD_TRANSCEIVE, SerBuffer, &MInfo);
//  573 
//  574         if(status == STATUS_COLLISION_ERROR || status == STATUS_SUCCESS)
//  575         {
//  576             /* store number of received data bits and bytes internaly */
//  577             rbits = (unsigned char)(MInfo.nBitsReceived + (MInfo.nBytesReceived << 3) - nbits);
//  578 
//  579             if((rbits + bitcount) > COMPLETE_UID_BITS)
//  580             {
//  581                 status = STATUS_BITCOUNT_ERROR;
//  582                 continue;
//  583             }
//  584 
//  585             /* increment number of bytes received if also some bits received */
//  586             if(MInfo.nBitsReceived)
//  587                 MInfo.nBytesReceived++;
//  588 
//  589             /* reset offset for data copying */
//  590             byteOffset = 0;
//  591             /* if number of bits sent are not 0, write first received byte in last of sent */
//  592             if(nbits)
//  593             {   /* last byte transmitted and first byte received are the same */
//  594                 snr[nbytes - 1] |= SerBuffer[0];
//  595                 byteOffset++;
//  596             }
//  597 
//  598             for(i=0;i<(4-nbytes);i++)
//  599                 snr[nbytes + i] = SerBuffer[i + byteOffset];
//  600 
//  601             if(status == STATUS_COLLISION_ERROR)
//  602             {
//  603                 /* calculate new bitcount value */
//  604                 bitcount = (unsigned char)(bitcount + rbits);
??CascAnticoll_2:
        MOV     A,R4
        ADD     A,?V0 + 2
        MOV     ?V0 + 2,A
//  605                 status = STATUS_SUCCESS;
//  606             } else
??CascAnticoll_1:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x21
        JC      ??CascAnticoll_3
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x1
        LJMP    ??CascAnticoll_4 & 0xFFFF
??CascAnticoll_3:
        MOV     A,#0x7
        ANL     A,?V0 + 2
        MOV     ?V0 + 5,A
        MOV     A,?V0 + 2
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        JZ      ??CascAnticoll_5
        INC     ?V0 + 4
??CascAnticoll_5:
        MOV     A,?V0 + 10
        MOV     DPTR,#SerBuffer
        MOVX    @DPTR,A
        MOV     A,?V0 + 2
        CLR     C
        RLC     A
        ANL     A,#0xf0
        ADD     A,?V0 + 5
        ADD     A,#0x20
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,?V0 + 4
        JZ      ??CascAnticoll_6
        MOV     R2,#(SerBuffer + 2) & 0xff
        MOV     R3,#((SerBuffer + 2) >> 8) & 0xff
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     ?V0 + 3,?V0 + 4
??CascAnticoll_7:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        DEC     ?V0 + 3
        MOV     A,?V0 + 3
        JNZ     ??CascAnticoll_7
??CascAnticoll_6:
        ; Setup parameters for call to function RcSetReg
        MOV     A,?V0 + 5
        SWAP    A
        ORL     A,?V0 + 5
        MOV     R2,A
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_1:
        MOV     A,#0x2
        ADD     A,?V0 + 4
        MOV     DPTR,#MInfo + 3
        MOVX    @DPTR,A
        ; Setup parameters for call to function SetTimeOut
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     A,#0x6
        XRL     A,?V0 + 0
        JNZ     ??CascAnticoll_8
        MOV     A,R3
??CascAnticoll_8:
        JZ      ??CascAnticoll_9
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      $+5
        LJMP    ??CascAnticoll_4 & 0xFFFF
??CascAnticoll_9:
        MOV     DPTR,#MInfo + 5
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#MInfo + 4
        MOVX    A,@DPTR
        RLC     A
        RLC     A
        RLC     A
        ANL     A,#0xf8
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        MOV     R2,A
        POP     A
        CFI CFA_SP SP+0
        ADD     A,R2
        CLR     C
        SUBB    A,?V0 + 5
        MOV     R4,A
        MOV     ?V0 + 6,?V0 + 2
        ADD     A,?V0 + 6
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R2
        SUBB    A,#0x29
        MOV     A,R3
        SUBB    A,#0x0
        CLR     C
        XRL     A,PSW
        RLC     A
        JC      ??CascAnticoll_10
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        LJMP    ??CascAnticoll_4 & 0xFFFF
??CascAnticoll_10:
        MOV     A,R0
        ORL     A,R1
        JZ      ??CascAnticoll_11
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
??CascAnticoll_11:
        MOV     R5,#0x0
        MOV     DPL,?V0 + 4
        MOV     R0,DPL
        MOV     A,?V0 + 5
        JZ      ??CascAnticoll_12
        MOV     DPTR,#SerBuffer
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,R0
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R2
        ADD     A,#-0x1
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#-0x1
        MOV     DPH,A
        MOVX    A,@DPTR
        ORL     A,R5
        MOVX    @DPTR,A
        MOV     R5,#0x1
??CascAnticoll_12:
        MOV     ?V0 + 8,#0x0
        MOV     A,#0x4
        CLR     C
        SUBB    A,R0
        MOV     R2,A
        SUBB    A,0xE0 /* A   */
        MOV     R3,A
        CLR     C
        MOV     A,R2
        SUBB    A,#0x1
        MOV     A,R3
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??CascAnticoll_13
        MOV     A,R6
        ADD     A,R0
        MOV     ?V0 + 6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     ?V0 + 4,R5
        MOV     A,#SerBuffer & 0xff
        ADD     A,?V0 + 4
        MOV     R0,A
        MOV     A,#(SerBuffer >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R1,A
??CascAnticoll_14:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    @DPTR,A
        INC     ?V0 + 8
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        INC     DPTR
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
        MOV     ?V0 + 4,?V0 + 8
        CLR     C
        MOV     A,?V0 + 4
        SUBB    A,R2
        CLR     A
        SUBB    A,R3
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??CascAnticoll_14
??CascAnticoll_13:
        MOV     A,#0x6
        XRL     A,?V0 + 0
        JNZ     ??CascAnticoll_15
        MOV     A,?V0 + 1
??CascAnticoll_15:
        JNZ     $+5
        LJMP    ??CascAnticoll_2 & 0xFFFF
//  607             {
//  608                 if((snr[0] ^ snr[1] ^ snr[2] ^ snr[3]) != SerBuffer[i + byteOffset])
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        PUSH    DPL
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI CFA_SP SP+-4
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        PUSH    DPL
        CFI CFA_SP SP+-5
        PUSH    DPH
        CFI CFA_SP SP+-6
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        POP     DPH
        CFI CFA_SP SP+-5
        POP     DPL
        CFI CFA_SP SP+-4
        MOV     R0,A
        MOVX    A,@DPTR
        XRL     A,R0
        POP     DPH
        CFI CFA_SP SP+-3
        POP     DPL
        CFI CFA_SP SP+-2
        MOV     R0,A
        MOVX    A,@DPTR
        XRL     A,R0
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,A
        MOVX    A,@DPTR
        XRL     A,R0
        MOV     R2,A
        MOV     ?V0 + 4,R5
        MOV     A,?V0 + 8
        ADD     A,?V0 + 4
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#SerBuffer & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(SerBuffer >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,R2
        JZ      ??CascAnticoll_4
//  609                 {
//  610                     status = STATUS_WRONG_UID_CHECKBYTE;
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x5
//  611                     continue;
//  612                 }
//  613                 complete=1;
//  614             }
//  615         }
//  616     }
//  617 
//  618     /* clear RxAlign and TxLastbits */
//  619     RcSetReg(RC522_REG_BITFRAMING, 0);
??CascAnticoll_4:
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#0x0
        MOV     R1,#0xd
        LCALL   ??RcSetReg?relay
//  620 
//  621     /* activate values after coll */
//  622     RcSetReg(RC522_REG_COLL, RC522_BIT_VALUESAFTERCOLL);
        ; Setup parameters for call to function RcSetReg
        MOV     R2,#-0x80
        MOV     R1,#0xe
        LCALL   ??RcSetReg?relay
//  623     return status;
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock64
//  624 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond65 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond66 Using cfiCommon0
        CFI (cfiCond66) NoFunction
        CFI (cfiCond66) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond66) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond66) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond66) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond66) CFA_SP SP+0
        CFI (cfiCond66) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker67 Using cfiCommon1
        CFI (cfiPicker67) NoFunction
        CFI (cfiPicker67) Picker
        MOV     R1,#0x12
        LCALL   ??RcModifyReg?relay
        ; Setup parameters for call to function RcModifyReg
        ; Setup parameters for call to function RcModifyReg
        MOV     R3,#-0x80
        MOV     R2,#0x0
        MOV     R1,#0x13
        LCALL   ??RcModifyReg?relay
        RET
        CFI EndBlock cfiCond65
        CFI EndBlock cfiCond66
        CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond68 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond69 Using cfiCommon0
        CFI (cfiCond69) NoFunction
        CFI (cfiCond69) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond69) CFA_SP SP+0
        CFI (cfiCond69) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiPicker70 Using cfiCommon1
        CFI (cfiPicker70) NoFunction
        CFI (cfiPicker70) Picker
        MOV     R1,#0xd
        LCALL   ??RcSetReg?relay
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_76:
        RET
        CFI EndBlock cfiCond68
        CFI EndBlock cfiCond69
        CFI EndBlock cfiPicker70
//  625 
//  626 /*************************************************
//  627 Function:       Select
//  628 Description:
//  629      selecte a card to response the following command
//  630      NOTE: this founction is used internal only, and cannot call by application program
//  631 Parameter:
//  632      sel_code   command code
//  633      snr        buffer to store the card UID
//  634      sak        the byte to save the ACK from card
//  635 Return:
//  636      short      status of implement
//  637 **************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  638 short Select(unsigned char sel_code, unsigned char *snr, unsigned char *sak)
Select:
        CFI Block cfiBlock71 Using cfiCommon0
        CFI Function Select
        CODE
//  639 {
        FUNCALL Select, RcModifyReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Select, RcModifyReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Select, SetTimeOut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Select, M522PcdCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  640     short status = STATUS_SUCCESS;
//  641     /* define local variables */
//  642     unsigned char i;
//  643     /* activate CRC */
//  644     RcModifyReg(RC522_REG_TXMODE, 1, RC522_BIT_CRCEN);
        ; Setup parameters for call to function RcModifyReg
        MOV     R3,#-0x80
        MOV     R2,#0x1
        MOV     R1,#0x12
        LCALL   ??RcModifyReg?relay
//  645     RcModifyReg(RC522_REG_RXMODE, 1, RC522_BIT_CRCEN);
        ; Setup parameters for call to function RcModifyReg
        MOV     R3,#-0x80
        MOV     R2,#0x1
        MOV     R1,#0x13
        LCALL   ??RcModifyReg?relay
//  646 
//  647     /* prepare data stream */
//  648     SerBuffer[0] = sel_code;   /* command code */
        MOV     A,?V0 + 2
        MOV     DPTR,#SerBuffer
        MOVX    @DPTR,A
//  649     SerBuffer[1] = NVB_MAX_PARAMETER;       /* parameter */
        INC     DPTR
        MOV     A,#0x70
        MOVX    @DPTR,A
//  650     for(i=0;i<4;i++)
        MOV     R4,#(SerBuffer + 2) & 0xff
        MOV     R5,#((SerBuffer + 2) >> 8) & 0xff
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x4
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R3,A
//  651         SerBuffer[2+i] = snr[i];   /* serial numbner bytes 1 to 4 */
??Select_0:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_34:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R2
        XRL     A,R0
        JNZ     ??Select_1
        MOV     A,R3
        XRL     A,R1
??Select_1:
        JNZ     ??Select_0
//  652     SerBuffer[6] = (unsigned char)(snr[0] ^ snr[1] ^ snr[2] ^ snr[3]);   /* serial number check byte */
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        PUSH    DPL
        CFI CFA_SP SP+-3
        PUSH    DPH
        CFI CFA_SP SP+-4
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        PUSH    DPL
        CFI CFA_SP SP+-5
        PUSH    DPH
        CFI CFA_SP SP+-6
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        POP     DPH
        CFI CFA_SP SP+-5
        POP     DPL
        CFI CFA_SP SP+-4
        MOV     R0,A
        MOVX    A,@DPTR
        XRL     A,R0
        POP     DPH
        CFI CFA_SP SP+-3
        POP     DPL
        CFI CFA_SP SP+-2
        MOV     R0,A
        MOVX    A,@DPTR
        XRL     A,R0
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     R0,A
        MOVX    A,@DPTR
        XRL     A,R0
        MOV     DPTR,#SerBuffer + 6
        MOVX    @DPTR,A
//  653 
//  654     /* prepare data for common transceive */
//  655     ResetInfo(MInfo);
        MOV     DPTR,#MInfo
        CLR     A
        LCALL   ?Subroutine17 & 0xFFFF
//  656     MInfo.nBytesToSend   = 0x07;
??CrossCallReturnLabel_29:
        MOV     A,#0x7
        MOVX    @DPTR,A
//  657     SetTimeOut(1000);
        ; Setup parameters for call to function SetTimeOut
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ?Subroutine9 & 0xFFFF
//  658     //SetTimeOut(2000);
//  659     status = M522PcdCmd(RC522_CMD_TRANSCEIVE, SerBuffer, &MInfo);
//  660 
//  661     if(status == STATUS_SUCCESS)
??CrossCallReturnLabel_9:
        ORL     A,R3
        JNZ     ??Select_2
//  662     {
//  663         if(MInfo.nBytesReceived == SAK_LENGTH && MInfo.nBitsReceived == 0)
        MOV     DPTR,#MInfo + 4
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??Select_3
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_59:
        JNZ     ??Select_3
//  664             *sak = SerBuffer[0];
        MOV     DPTR,#SerBuffer
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
        SJMP    ??Select_2
//  665         else
//  666             status = STATUS_BITCOUNT_ERROR;
??Select_3:
        MOV     R2,#0x4
        MOV     R3,#0x0
//  667     }
//  668     return status;
??Select_2:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock71
//  669 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
        CFI Block cfiCond72 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_33
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond73 Using cfiCommon0
        CFI (cfiCond73) NoFunction
        CFI (cfiCond73) Conditional ??CrossCallReturnLabel_34
        CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond73) CFA_SP SP+0
        CFI (cfiCond73) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker74 Using cfiCommon1
        CFI (cfiPicker74) NoFunction
        CFI (cfiPicker74) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        RET
        CFI EndBlock cfiCond72
        CFI EndBlock cfiCond73
        CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond75 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond76 Using cfiCommon0
        CFI (cfiCond76) NoFunction
        CFI (cfiCond76) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond76) CFA_SP SP+0
        CFI (cfiCond76) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker77 Using cfiCommon1
        CFI (cfiPicker77) NoFunction
        CFI (cfiPicker77) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV     A,R2
        RET
        CFI EndBlock cfiCond75
        CFI EndBlock cfiCond76
        CFI EndBlock cfiPicker77
//  670 
//  671 /*************************************************
//  672 Function:       HaltA
//  673 Description:
//  674      halt the current selected card
//  675 Parameter:
//  676      NONE
//  677 Return:
//  678      short      status of implement
//  679 **************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  680 short HaltA(void)
HaltA:
        CFI Block cfiBlock78 Using cfiCommon0
        CFI Function HaltA
        CODE
//  681 {
        FUNCALL HaltA, SetTimeOut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL HaltA, M522PcdCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  682     short  status = STATUS_SUCCESS;
//  683     /* initialise data buffer */
//  684     SerBuffer[0] = HALTA_CMD;
        MOV     DPTR,#SerBuffer
        MOV     A,#0x50
        MOVX    @DPTR,A
//  685     SerBuffer[1] = HALTA_PARAM;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  686 
//  687     ResetInfo(MInfo);
        MOV     DPTR,#MInfo
        LCALL   ?Subroutine17 & 0xFFFF
//  688     MInfo.nBytesToSend   = HALTA_CMD_LENGTH;
??CrossCallReturnLabel_30:
        MOV     A,#0x2
        MOVX    @DPTR,A
//  689     SetTimeOut(1000);
        ; Setup parameters for call to function SetTimeOut
        MOV     R2,#-0x18
        MOV     R3,#0x3
        LCALL   ??Subroutine37_0 & 0xFFFF
//  690     status = M522PcdCmd(RC522_CMD_TRANSCEIVE, SerBuffer, &MInfo);
//  691 
//  692     if(status == STATUS_IO_TIMEOUT)
??CrossCallReturnLabel_70:
        JNZ     ??HaltA_0
        MOV     A,R3
??HaltA_0:
        JNZ     ??HaltA_1
//  693         status = STATUS_SUCCESS;
        MOV     R2,#0x0
        MOV     R3,#0x0
//  694     return status;
??HaltA_1:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock78
//  695 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
        CFI Block cfiCond79 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond80 Using cfiCommon0
        CFI (cfiCond80) NoFunction
        CFI (cfiCond80) Conditional ??CrossCallReturnLabel_30
        CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond80) CFA_SP SP+0
        CFI (cfiCond80) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker81 Using cfiCommon1
        CFI (cfiPicker81) NoFunction
        CFI (cfiPicker81) Picker
        LCALL   ??Subroutine38_0 & 0xFFFF
??CrossCallReturnLabel_80:
        MOV     DPTR,#MInfo + 3
        RET
        CFI EndBlock cfiCond79
        CFI EndBlock cfiCond80
        CFI EndBlock cfiPicker81
//  696 
//  697 /*************************************************
//  698 Function:       Authentication
//  699 Description:
//  700      authentication the password for a sector of mifare card
//  701 Parameter:
//  702      auth_mode  specify key A or key B -- MIFARE_AUTHENT_A or MIFARE_AUTHENT_A
//  703      key        the buffer stored the key(6 bytes)
//  704      snr        the buffer stored the selected card's UID
//  705      addr       the block address of a sector
//  706 Return:
//  707      short      status of implement
//  708 **************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  709 short Authentication(unsigned char auth_mode,
Authentication:
        CFI Block cfiBlock82 Using cfiCommon0
        CFI Function Authentication
        CODE
//  710                      unsigned char *key,
//  711                      unsigned char *snr,
//  712                      unsigned char addr)
//  713 {
        FUNCALL Authentication, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authentication, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authentication, SetTimeOut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authentication, M522PcdCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL Authentication, RcGetReg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
//  714     short status;
//  715     //unsigned char i = 0;
//  716     unsigned char RegVal;
//  717 
//  718     ResetInfo(MInfo);
        LCALL   ?Subroutine16 & 0xFFFF
//  719 
//  720     SerBuffer[0] = auth_mode;      //key A or key B
//  721     SerBuffer[1] = addr;           //address to authentication
??CrossCallReturnLabel_27:
        MOV     A,R0
        INC     DPTR
        MOVX    @DPTR,A
//  722     memcpy(SerBuffer+2,key,6);     //6 bytes key
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 2,#0x6
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#(SerBuffer + 2) & 0xff
        MOV     R3,#((SerBuffer + 2) >> 8) & 0xff
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  723     memcpy(SerBuffer+8,snr,4);     //4 bytes UID
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 2,#0x4
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#(SerBuffer + 8) & 0xff
        MOV     R3,#((SerBuffer + 8) >> 8) & 0xff
        LCALL   ??Subroutine36_0 & 0xFFFF
??CrossCallReturnLabel_67:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  724     MInfo.nBytesToSend = 12;       //length
        MOV     DPTR,#MInfo + 3
        MOV     A,#0xc
        MOVX    @DPTR,A
//  725     SetTimeOut(10000);
        ; Setup parameters for call to function SetTimeOut
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   ?Subroutine32 & 0xFFFF
//  726     status = M522PcdCmd(RC522_CMD_AUTHENT, SerBuffer, &MInfo);
??CrossCallReturnLabel_74:
        MOV     R1,#0xe
        LCALL   ??M522PcdCmd?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  727     if(status == STATUS_SUCCESS)
        MOV     A,R6
        ORL     A,R7
        JNZ     ??Authentication_0
//  728     {
//  729         RegVal = RcGetReg(RC522_REG_STATUS2);
//  730         if((RegVal & 0x0f) != 0x08)
        ; Setup parameters for call to function RcGetReg
        MOV     R1,#0x8
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_26:
        ANL     A,#0xf
        XRL     A,#0x8
        JZ      ??Authentication_0
//  731             status = STATUS_AUTHENT_ERROR;
        MOV     R6,#0x1
        MOV     R7,#0x2
//  732     }
//  733     return status;
??Authentication_0:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        CFI EndBlock cfiBlock82
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  734 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock83 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock83
//  735 /*************************************************
//  736 Function:       Read
//  737 Description:
//  738      read 16 bytes data from a block
//  739 Parameter:
//  740      addr       the address of the block
//  741      _data      the buffer to save the 16 bytes data
//  742 Return:
//  743      short      status of implement
//  744 **************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  745 short Read(unsigned char addr, unsigned char *_data)
`Read`:
        CFI Block cfiBlock84 Using cfiCommon0
        CFI Function `Read`
        CODE
//  746 {
        FUNCALL `Read`, SetTimeOut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `Read`, M522PcdCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `Read`, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `Read`, memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `Read`, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        LCALL   ?Subroutine15 & 0xFFFF
//  747    short status = STATUS_SUCCESS;
//  748    //char tmp    = 0;
//  749 
//  750    ResetInfo(MInfo);
//  751    SerBuffer[0] = MIFARE_READ;
??CrossCallReturnLabel_60:
        MOV     A,#0x30
        MOVX    @DPTR,A
//  752    SerBuffer[1] = addr;
        MOV     A,R1
        LCALL   ?Subroutine30 & 0xFFFF
//  753    MInfo.nBytesToSend   = 2;
??CrossCallReturnLabel_48:
        MOVX    @DPTR,A
//  754    SetTimeOut(10000);
        ; Setup parameters for call to function SetTimeOut
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   ?Subroutine7 & 0xFFFF
//  755    status = M522PcdCmd(RC522_CMD_TRANSCEIVE,
//  756                        SerBuffer,
//  757                        &MInfo);
//  758 
//  759    if (status != STATUS_SUCCESS)
??CrossCallReturnLabel_5:
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??Read_0
//  760    {
//  761       if (status != STATUS_IO_TIMEOUT )     // no timeout occured
        MOV     A,#0x1
        XRL     A,?V0 + 0
        JNZ     ??Read_1
        MOV     A,R3
??Read_1:
        JZ      ??Read_2
//  762       {
//  763          if (MInfo.nBitsReceived == 4)
        MOV     DPTR,#MInfo + 5
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??Read_3
        INC     DPTR
        MOVX    A,@DPTR
??Read_3:
        JNZ     ??Read_2
//  764          {
//  765              SerBuffer[0] &= 0x0f;
        LCALL   ?Subroutine24 & 0xFFFF
//  766              if ((SerBuffer[0] & 0x0a) == 0)
??CrossCallReturnLabel_43:
        JNZ     ??Read_4
//  767              {
//  768                 status = STATUS_AUTHENT_ERROR;
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x2
        SJMP    ??Read_2
//  769              }
//  770              else
//  771              {
//  772                 status = STATUS_INVALID_FORMAT;
??Read_4:
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0x1
//  773              }
//  774           }
//  775       }
//  776       memset(_data,0,16);
??Read_2:
        ; Setup parameters for call to function memset
        MOV     ?V0 + 4,#0x10
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??memset?relay
        SJMP    ??Read_5
        CFI CFA_XSP16 add(XSP16, 14)
//  777    }
//  778    else   // Response Processing
//  779    {
//  780       if (MInfo.nBytesReceived != 16)
??Read_0:
        MOV     DPTR,#MInfo + 4
        MOVX    A,@DPTR
        XRL     A,#0x10
        JZ      ??Read_6
//  781       {
//  782          status = STATUS_ACCESS_DENIED;
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
//  783          memset(_data,0,16);
        ; Setup parameters for call to function memset
        SJMP    ??Read_2
//  784       }
//  785       else
//  786       {
//  787          memcpy(_data,SerBuffer,16);
??Read_6:
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 4,#0x10
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#SerBuffer & 0xff
        MOV     R5,#(SerBuffer >> 8) & 0xff
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??memcpy?relay
??Read_5:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  788       }
//  789    }
//  790    return status;
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock84
//  791 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
        CFI Block cfiCond85 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_60
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond86 Using cfiCommon0
        CFI (cfiCond86) NoFunction
        CFI (cfiCond86) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond86) CFA_SP SP+0
        CFI (cfiCond86) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker87 Using cfiCommon1
        CFI (cfiPicker87) NoFunction
        CFI (cfiPicker87) Picker
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        CFI EndBlock cfiCond85
        CFI EndBlock cfiCond86
        CFI EndBlock cfiPicker87
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
        CFI Block cfiCond88 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_62
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond89 Using cfiCommon0
        CFI (cfiCond89) NoFunction
        CFI (cfiCond89) Conditional ??CrossCallReturnLabel_60
        CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond89) CFA_SP SP+0
        CFI (cfiCond89) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond90 Using cfiCommon0
        CFI (cfiCond90) NoFunction
        CFI (cfiCond90) Conditional ??CrossCallReturnLabel_61
        CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond90) CFA_SP SP+0
        CFI (cfiCond90) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker91 Using cfiCommon1
        CFI (cfiPicker91) NoFunction
        CFI (cfiPicker91) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV     DPTR,#SerBuffer
        RET
        CFI EndBlock cfiCond88
        CFI EndBlock cfiCond89
        CFI EndBlock cfiCond90
        CFI EndBlock cfiPicker91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond92 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond93 Using cfiCommon0
        CFI (cfiCond93) NoFunction
        CFI (cfiCond93) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond93) CFA_SP SP+0
        CFI (cfiCond93) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker94 Using cfiCommon1
        CFI (cfiPicker94) NoFunction
        CFI (cfiPicker94) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        RET
        CFI EndBlock cfiCond92
        CFI EndBlock cfiCond93
        CFI EndBlock cfiPicker94

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
        CFI Block cfiCond95 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond96 Using cfiCommon0
        CFI (cfiCond96) NoFunction
        CFI (cfiCond96) Conditional ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_9
        CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond96) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond96) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond96) CFA_SP SP+0
        CFI (cfiCond96) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond97 Using cfiCommon0
        CFI (cfiCond97) NoFunction
        CFI (cfiCond97) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_4
        CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond97) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond97) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond97) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond97) CFA_SP SP+0
        CFI (cfiCond97) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond98 Using cfiCommon0
        CFI (cfiCond98) NoFunction
        CFI (cfiCond98) Conditional ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_5
        CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond98) CFA_SP SP+0
        CFI (cfiCond98) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond99 Using cfiCommon0
        CFI (cfiCond99) NoFunction
        CFI (cfiCond99) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_68
        CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond99) CFA_SP SP+0
        CFI (cfiCond99) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond100 Using cfiCommon0
        CFI (cfiCond100) NoFunction
        CFI (cfiCond100) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_69
        CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond100) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond100) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond100) CFA_SP SP+0
        CFI (cfiCond100) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond101 Using cfiCommon0
        CFI (cfiCond101) NoFunction
        CFI (cfiCond101) Conditional ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_70
        CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond101) CFA_SP SP+0
        CFI (cfiCond101) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker102 Using cfiCommon1
        CFI (cfiPicker102) NoFunction
        CFI (cfiPicker102) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_75:
        MOV     R1,#0xc
        LCALL   ??M522PcdCmd?relay
        RET
        CFI EndBlock cfiCond95
        CFI EndBlock cfiCond96
        CFI EndBlock cfiCond97
        CFI EndBlock cfiCond98
        CFI EndBlock cfiCond99
        CFI EndBlock cfiCond100
        CFI EndBlock cfiCond101
        CFI EndBlock cfiPicker102

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
        CFI Block cfiCond103 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_74
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond104 Using cfiCommon0
        CFI (cfiCond104) NoFunction
        CFI (cfiCond104) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_8
        CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond104) CFA_SP SP+0
        CFI (cfiCond104) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond105 Using cfiCommon0
        CFI (cfiCond105) NoFunction
        CFI (cfiCond105) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_71, ??CrossCallReturnLabel_9
        CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond105) CFA_SP SP+0
        CFI (cfiCond105) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond106 Using cfiCommon0
        CFI (cfiCond106) NoFunction
        CFI (cfiCond106) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_4
        CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond106) CFA_SP SP+0
        CFI (cfiCond106) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond107 Using cfiCommon0
        CFI (cfiCond107) NoFunction
        CFI (cfiCond107) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_72, ??CrossCallReturnLabel_5
        CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond107) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond107) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond107) CFA_SP SP+0
        CFI (cfiCond107) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond108 Using cfiCommon0
        CFI (cfiCond108) NoFunction
        CFI (cfiCond108) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_68
        CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond108) CFA_SP SP+0
        CFI (cfiCond108) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond109 Using cfiCommon0
        CFI (cfiCond109) NoFunction
        CFI (cfiCond109) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_69
        CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond109) CFA_SP SP+0
        CFI (cfiCond109) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond110 Using cfiCommon0
        CFI (cfiCond110) NoFunction
        CFI (cfiCond110) Conditional ??CrossCallReturnLabel_75, ??CrossCallReturnLabel_73, ??CrossCallReturnLabel_70
        CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond110) CFA_SP SP+0
        CFI (cfiCond110) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker111 Using cfiCommon1
        CFI (cfiPicker111) NoFunction
        CFI (cfiPicker111) Picker
        LCALL   ??SetTimeOut?relay
        ; Setup parameters for call to function M522PcdCmd
        ; Setup parameters for call to function M522PcdCmd
        ; Setup parameters for call to function M522PcdCmd
        ; Setup parameters for call to function M522PcdCmd
        ; Setup parameters for call to function M522PcdCmd
        ; Setup parameters for call to function M522PcdCmd
        ; Setup parameters for call to function M522PcdCmd
        ; Setup parameters for call to function M522PcdCmd
        MOV     R4,#MInfo & 0xff
        MOV     R5,#(MInfo >> 8) & 0xff
        MOV     R2,#SerBuffer & 0xff
        MOV     R3,#(SerBuffer >> 8) & 0xff
        RET
        CFI EndBlock cfiCond103
        CFI EndBlock cfiCond104
        CFI EndBlock cfiCond105
        CFI EndBlock cfiCond106
        CFI EndBlock cfiCond107
        CFI EndBlock cfiCond108
        CFI EndBlock cfiCond109
        CFI EndBlock cfiCond110
        CFI EndBlock cfiPicker111
//  792 
//  793 /*************************************************
//  794 Function:       Write
//  795 Description:
//  796      write 16 bytes data to a block
//  797 Parameter:
//  798      addr       the address of the block
//  799      _data      the data to write
//  800 Return:
//  801      short      status of implement
//  802 **************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  803 short Write( unsigned char addr, unsigned char *_data)
`Write`:
        CFI Block cfiBlock112 Using cfiCommon0
        CFI Function `Write`
        CODE
//  804 {
        FUNCALL `Write`, SetTimeOut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `Write`, M522PcdCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `Write`, SetTimeOut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `Write`, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL `Write`, M522PcdCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        LCALL   ?Subroutine15 & 0xFFFF
//  805     short status = STATUS_SUCCESS;
//  806     ResetInfo(MInfo);
//  807     SerBuffer[0] = MIFARE_WRITE;
??CrossCallReturnLabel_61:
        MOV     A,#-0x60
        MOVX    @DPTR,A
//  808     SerBuffer[1] = addr;
        MOV     A,R1
        LCALL   ?Subroutine4 & 0xFFFF
//  809     MInfo.nBytesToSend   = 2;
//  810     SetTimeOut(20000);
//  811     status = M522PcdCmd(RC522_CMD_TRANSCEIVE,
//  812                         SerBuffer,
//  813                         &MInfo);
//  814 
//  815     if (status != STATUS_IO_TIMEOUT)
??CrossCallReturnLabel_68:
        JNZ     ??Write_0
        MOV     A,R3
??Write_0:
        JZ      ??Write_1
//  816     {
//  817        if (MInfo.nBitsReceived != 4)
        MOV     DPTR,#MInfo + 5
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??Write_2
        INC     DPTR
        MOVX    A,@DPTR
??Write_2:
        JZ      ??Write_3
//  818        {
//  819           status = STATUS_BITCOUNT_ERROR;
??Write_4:
        MOV     R2,#0x4
        SJMP    ??Write_5
//  820        }
//  821        else
//  822        {
//  823           SerBuffer[0] &= 0x0f;
??Write_3:
        LCALL   ?Subroutine24 & 0xFFFF
//  824           if ((SerBuffer[0] & 0x0a) == 0)
??CrossCallReturnLabel_44:
        JNZ     ??Write_6
//  825           {
//  826              status = STATUS_AUTHENT_ERROR;
        MOV     R2,#0x1
        MOV     R3,#0x2
        SJMP    ??Write_1
//  827           }
//  828           else
//  829           {
//  830              if (SerBuffer[0] == 0x0a)
??Write_6:
        MOVX    A,@DPTR
        XRL     A,#0xa
        JNZ     ??Write_7
//  831              {
//  832                 status = STATUS_SUCCESS;
//  833              }
//  834              else
//  835              {
//  836                 status = STATUS_INVALID_FORMAT;
//  837              }
//  838           }
//  839        }
//  840     }
//  841 
//  842     if ( status == STATUS_SUCCESS)
//  843     {
//  844 
//  845        SetTimeOut(60000);
        ; Setup parameters for call to function SetTimeOut
        MOV     R2,#0x60
        MOV     R3,#-0x16
        LCALL   ?Subroutine6 & 0xFFFF
//  846 
//  847        ResetInfo(MInfo);
//  848        memcpy(SerBuffer,_data,16);
??CrossCallReturnLabel_2:
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 2,#0x10
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 14)
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
//  849        MInfo.nBytesToSend   = 16;
        MOV     DPTR,#MInfo + 3
        MOV     A,#0x10
        LCALL   ?Subroutine18 & 0xFFFF
//  850        status = M522PcdCmd(RC522_CMD_TRANSCEIVE,
//  851                            SerBuffer,
//  852                            &MInfo);
//  853 
//  854        if (status & 0x80)
??CrossCallReturnLabel_31:
        ANL     A,#0x80
        JNZ     ??Write_8
//  855        {
//  856           status = STATUS_IO_TIMEOUT;
//  857        }
//  858        else
//  859        {
//  860           if (MInfo.nBitsReceived != 4)
        MOV     DPTR,#MInfo + 5
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??Write_9
        INC     DPTR
        MOVX    A,@DPTR
??Write_9:
        JNZ     ??Write_4
//  861           {
//  862              status = STATUS_BITCOUNT_ERROR;
//  863           }
//  864           else
//  865           {
//  866              SerBuffer[0] &= 0x0f;
        LCALL   ?Subroutine24 & 0xFFFF
//  867              if ((SerBuffer[0] & 0x0a) == 0)
??CrossCallReturnLabel_45:
        JNZ     ??Write_10
//  868              {
//  869                 status = STATUS_ACCESS_DENIED;
        MOV     R2,#0x8
        SJMP    ??Write_5
//  870              }
??Write_7:
        MOV     R2,#0x5
        MOV     R3,#0x1
        SJMP    ??Write_1
??Write_8:
        MOV     R2,#0x1
        SJMP    ??Write_5
//  871              else
//  872              {
//  873                 if (SerBuffer[0] == 0x0a)
??Write_10:
        MOVX    A,@DPTR
        XRL     A,#0xa
        JNZ     ??Write_7
//  874                 {
//  875                    status = STATUS_SUCCESS;
        MOV     R2,#0x0
??Write_5:
        MOV     R3,#0x0
//  876                 }
//  877                 else
//  878                 {
//  879                    status = STATUS_INVALID_FORMAT;
//  880                 }
//  881              }
//  882           }
//  883        }
//  884     }
//  885   return status;
??Write_1:
        LJMP    ?Subroutine3 & 0xFFFF
        CFI EndBlock cfiBlock112
//  886 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
        CFI Block cfiCond113 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_63
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond114 Using cfiCommon0
        CFI (cfiCond114) NoFunction
        CFI (cfiCond114) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond114) CFA_SP SP+0
        CFI (cfiCond114) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker115 Using cfiCommon1
        CFI (cfiPicker115) NoFunction
        CFI (cfiPicker115) Picker
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#SerBuffer & 0xff
        MOV     R3,#(SerBuffer >> 8) & 0xff
        CFI EndBlock cfiCond113
        CFI EndBlock cfiCond114
        CFI EndBlock cfiPicker115
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
        CFI Block cfiCond116 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_65
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        CFI Block cfiCond117 Using cfiCommon0
        CFI (cfiCond117) NoFunction
        CFI (cfiCond117) Conditional ??CrossCallReturnLabel_66
        CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond117) CFA_SP SP+0
        CFI (cfiCond117) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond118 Using cfiCommon0
        CFI (cfiCond118) NoFunction
        CFI (cfiCond118) Conditional ??CrossCallReturnLabel_67
        CFI (cfiCond118) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond118) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond118) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond118) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond118) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond118) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond118) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond118) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond118) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond118) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond118) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond118) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond118) CFA_SP SP+0
        CFI (cfiCond118) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond119 Using cfiCommon0
        CFI (cfiCond119) NoFunction
        CFI (cfiCond119) Conditional ??CrossCallReturnLabel_63
        CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond119) CFA_SP SP+0
        CFI (cfiCond119) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond120 Using cfiCommon0
        CFI (cfiCond120) NoFunction
        CFI (cfiCond120) Conditional ??CrossCallReturnLabel_64
        CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond120) CFA_SP SP+0
        CFI (cfiCond120) CFA_XSP16 add(XSP16, 16)
        CFI Block cfiPicker121 Using cfiCommon1
        CFI (cfiPicker121) NoFunction
        CFI (cfiPicker121) Picker
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond116
        CFI EndBlock cfiCond117
        CFI EndBlock cfiCond118
        CFI EndBlock cfiCond119
        CFI EndBlock cfiCond120
        CFI EndBlock cfiPicker121

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
        CFI Block cfiCond122 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_43
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond123 Using cfiCommon0
        CFI (cfiCond123) NoFunction
        CFI (cfiCond123) Conditional ??CrossCallReturnLabel_44
        CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond123) CFA_SP SP+0
        CFI (cfiCond123) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond124 Using cfiCommon0
        CFI (cfiCond124) NoFunction
        CFI (cfiCond124) Conditional ??CrossCallReturnLabel_45
        CFI (cfiCond124) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond124) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond124) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond124) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond124) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond124) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond124) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond124) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond124) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond124) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond124) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond124) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond124) CFA_SP SP+0
        CFI (cfiCond124) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker125 Using cfiCommon1
        CFI (cfiPicker125) NoFunction
        CFI (cfiPicker125) Picker
        MOV     DPTR,#SerBuffer
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOVX    @DPTR,A
        ANL     A,#0xa
        RET
        CFI EndBlock cfiCond122
        CFI EndBlock cfiCond123
        CFI EndBlock cfiCond124
        CFI EndBlock cfiPicker125

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond126 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_68
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond127 Using cfiCommon0
        CFI (cfiCond127) NoFunction
        CFI (cfiCond127) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond127) CFA_SP SP+0
        CFI (cfiCond127) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker128 Using cfiCommon1
        CFI (cfiPicker128) NoFunction
        CFI (cfiPicker128) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_49:
        MOVX    @DPTR,A
        ; Setup parameters for call to function SetTimeOut
        ; Setup parameters for call to function SetTimeOut
        MOV     R2,#0x20
        MOV     R3,#0x4e
        CFI EndBlock cfiCond126
        CFI EndBlock cfiCond127
        CFI EndBlock cfiPicker128
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
        CFI Block cfiCond129 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_70
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond130 Using cfiCommon0
        CFI (cfiCond130) NoFunction
        CFI (cfiCond130) Conditional ??CrossCallReturnLabel_68
        CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond130) CFA_SP SP+0
        CFI (cfiCond130) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond131 Using cfiCommon0
        CFI (cfiCond131) NoFunction
        CFI (cfiCond131) Conditional ??CrossCallReturnLabel_69
        CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond131) CFA_SP SP+0
        CFI (cfiCond131) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker132 Using cfiCommon1
        CFI (cfiPicker132) NoFunction
        CFI (cfiPicker132) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV     A,#0x1
        XRL     A,R2
        RET
        CFI EndBlock cfiCond129
        CFI EndBlock cfiCond130
        CFI EndBlock cfiCond131
        CFI EndBlock cfiPicker132

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
        CFI Block cfiCond133 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_48
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond134 Using cfiCommon0
        CFI (cfiCond134) NoFunction
        CFI (cfiCond134) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_68
        CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond134) CFA_SP SP+0
        CFI (cfiCond134) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond135 Using cfiCommon0
        CFI (cfiCond135) NoFunction
        CFI (cfiCond135) Conditional ??CrossCallReturnLabel_49, ??CrossCallReturnLabel_69
        CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond135) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond135) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond135) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond135) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond135) CFA_SP SP+0
        CFI (cfiCond135) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond136 Using cfiCommon0
        CFI (cfiCond136) NoFunction
        CFI (cfiCond136) Conditional ??CrossCallReturnLabel_50
        CFI (cfiCond136) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond136) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond136) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond136) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond136) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond136) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond136) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond136) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond136) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond136) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond136) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond136) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond136) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond136) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond136) CFA_SP SP+0
        CFI (cfiCond136) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker137 Using cfiCommon1
        CFI (cfiPicker137) NoFunction
        CFI (cfiPicker137) Picker
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPTR,#MInfo + 3
        MOV     A,#0x2
        RET
        CFI EndBlock cfiCond133
        CFI EndBlock cfiCond134
        CFI EndBlock cfiCond135
        CFI EndBlock cfiCond136
        CFI EndBlock cfiPicker137
//  887 
//  888 /*************************************************
//  889 Function:       ValueOper
//  890 Description:
//  891      block value operation function, increment or decrement the block value
//  892      and transfer to a block
//  893 Parameter:
//  894      OperMode   MIFARE_INCREMENT or MIFARE_DECREMENT
//  895      addr       the address of the block
//  896      value      the value to be increment or decrement
//  897      trans_addr the address to save the resulet of increment or decrement
//  898 Return:
//  899      short      status of implement
//  900 **************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  901 short ValueOper(unsigned char OperMode, 
ValueOper:
        CFI Block cfiBlock138 Using cfiCommon0
        CFI Function ValueOper
        CODE
//  902                     unsigned char addr,
//  903                     unsigned char *value,
//  904                     unsigned char trans_addr)
//  905 {
        FUNCALL ValueOper, SetTimeOut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ValueOper, M522PcdCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ValueOper, SetTimeOut
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ValueOper, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ValueOper, M522PcdCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ValueOper, M522PcdCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     ?V0 + 2,R3
//  906    short status = STATUS_SUCCESS;
//  907    ResetInfo(MInfo);
        LCALL   ?Subroutine16 & 0xFFFF
//  908    SerBuffer[0] = OperMode;
//  909    SerBuffer[1] = addr;
??CrossCallReturnLabel_28:
        MOV     A,R2
        LCALL   ?Subroutine4 & 0xFFFF
//  910    MInfo.nBytesToSend   = 2;
//  911    SetTimeOut(20000);
//  912    status = M522PcdCmd(RC522_CMD_TRANSCEIVE,
//  913                        SerBuffer,
//  914                        &MInfo);
//  915 
//  916    if (status != STATUS_IO_TIMEOUT)
??CrossCallReturnLabel_69:
        JNZ     ??ValueOper_0
        MOV     A,R3
??ValueOper_0:
        JZ      ??ValueOper_1
//  917    {
//  918         if (MInfo.nBitsReceived != 4)
        MOV     DPTR,#MInfo + 5
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??ValueOper_2
        INC     DPTR
        MOVX    A,@DPTR
??ValueOper_2:
        JZ      ??ValueOper_3
//  919         {
//  920            status = STATUS_BITCOUNT_ERROR;
        MOV     R2,#0x4
        SJMP    ??ValueOper_4
//  921         }
//  922         else
//  923         {
//  924            SerBuffer[0] &= 0x0f;
??ValueOper_3:
        MOV     DPTR,#SerBuffer
        MOVX    A,@DPTR
        ANL     A,#0xf
        MOVX    @DPTR,A
//  925            switch(SerBuffer[0])
        JZ      ??ValueOper_5
        DEC     A
        JZ      ??ValueOper_6
        ADD     A,#-0x9
        JZ      ??ValueOper_7
        SJMP    ??ValueOper_8
//  926            {
//  927               case 0x00:
//  928                  status = STATUS_AUTHENT_ERROR;
??ValueOper_5:
        MOV     R2,#0x1
        MOV     R3,#0x2
//  929                  break;
        SJMP    ??ValueOper_1
//  930               case 0x0a:
//  931                  status = STATUS_SUCCESS;
//  932                  break;
//  933               case 0x01:
//  934                  status = STATUS_INVALID_FORMAT;
//  935                  break;
//  936               default:
//  937                  status = STATUS_OTHER_ERROR;
//  938                  break;
//  939            }
//  940         }
//  941      }
//  942 
//  943      if ( status == STATUS_SUCCESS)
//  944      {
//  945         SetTimeOut(10000);
??ValueOper_7:
        ; Setup parameters for call to function SetTimeOut
        MOV     R2,#0x10
        MOV     R3,#0x27
        LCALL   ?Subroutine6 & 0xFFFF
//  946         ResetInfo(MInfo);
//  947         memcpy(SerBuffer,value,4);
??CrossCallReturnLabel_3:
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 4,#0x4
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 16)
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_64:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
//  948         MInfo.nBytesToSend   = 4;
        MOV     DPTR,#MInfo + 3
        MOV     A,#0x4
        LCALL   ?Subroutine29 & 0xFFFF
//  949         status = M522PcdCmd(RC522_CMD_TRANSCEIVE,
//  950                             SerBuffer,
//  951                             &MInfo);
//  952 
//  953         if (status == STATUS_IO_TIMEOUT||(status == MIFARE_DECREMENT && OperMode == MIFARE_DECREMENT))
??CrossCallReturnLabel_46:
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??ValueOper_9
        MOV     A,R3
??ValueOper_9:
        JZ      ??ValueOper_10
        MOV     A,#-0x40
        XRL     A,R2
        JNZ     ??ValueOper_11
        MOV     A,R3
??ValueOper_11:
        JNZ     ??ValueOper_8
        MOV     A,#-0x40
        XRL     A,?V0 + 0
        JNZ     ??ValueOper_8
//  954         {
//  955             status = STATUS_SUCCESS;
//  956         }
//  957         else
//  958         {
//  959             status = STATUS_OTHER_ERROR;
//  960         }
//  961      }
//  962      if ( status == STATUS_SUCCESS)
//  963      {
//  964         ResetInfo(MInfo);
??ValueOper_10:
        LCALL   ??Subroutine35_0 & 0xFFFF
//  965         SerBuffer[0] = MIFARE_TRANSFER;
??CrossCallReturnLabel_62:
        MOV     A,#-0x50
        MOVX    @DPTR,A
//  966         SerBuffer[1] = trans_addr;
        MOV     A,?V0 + 2
        LCALL   ?Subroutine30 & 0xFFFF
//  967         MInfo.nBytesToSend   = 2;
??CrossCallReturnLabel_50:
        LCALL   ?Subroutine18 & 0xFFFF
//  968         status = M522PcdCmd(RC522_CMD_TRANSCEIVE,
//  969                             SerBuffer,
//  970                             &MInfo);
//  971 
//  972         if (status & MIFARE_ACK_MASK)
??CrossCallReturnLabel_32:
        ANL     A,#0xa
        JZ      ??ValueOper_8
//  973         {
//  974             status = STATUS_SUCCESS;
        MOV     R2,#0x0
??ValueOper_4:
        MOV     R3,#0x0
//  975         }
//  976         else
//  977         {
//  978             status = STATUS_OTHER_ERROR;
//  979         }
//  980      }
//  981    return status;
??ValueOper_1:
        LJMP    ?Subroutine2 & 0xFFFF
??ValueOper_6:
        MOV     R2,#0x5
        MOV     R3,#0x1
        SJMP    ??ValueOper_1
??ValueOper_8:
        MOV     R2,#0x1
        MOV     R3,#0x7e
        SJMP    ??ValueOper_1
        CFI EndBlock cfiBlock138
//  982 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
        CFI Block cfiCond139 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_31
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond140 Using cfiCommon0
        CFI (cfiCond140) NoFunction
        CFI (cfiCond140) Conditional ??CrossCallReturnLabel_32
        CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond140) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond140) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond140) CFA_SP SP+0
        CFI (cfiCond140) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker141 Using cfiCommon1
        CFI (cfiPicker141) NoFunction
        CFI (cfiPicker141) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     A,R2
        RET
        CFI EndBlock cfiCond139
        CFI EndBlock cfiCond140
        CFI EndBlock cfiPicker141

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
        CFI Block cfiCond142 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_46
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond143 Using cfiCommon0
        CFI (cfiCond143) NoFunction
        CFI (cfiCond143) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_31
        CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond143) CFA_SP SP+0
        CFI (cfiCond143) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond144 Using cfiCommon0
        CFI (cfiCond144) NoFunction
        CFI (cfiCond144) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_32
        CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond144) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond144) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond144) CFA_SP SP+0
        CFI (cfiCond144) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker145 Using cfiCommon1
        CFI (cfiPicker145) NoFunction
        CFI (cfiPicker145) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function M522PcdCmd
        ; Setup parameters for call to function M522PcdCmd
        ; Setup parameters for call to function M522PcdCmd
        MOV     R4,#MInfo & 0xff
        MOV     R5,#(MInfo >> 8) & 0xff
        MOV     R2,#SerBuffer & 0xff
        MOV     R3,#(SerBuffer >> 8) & 0xff
        MOV     R1,#0xc
        LCALL   ??M522PcdCmd?relay
        RET
        CFI EndBlock cfiCond142
        CFI EndBlock cfiCond143
        CFI EndBlock cfiCond144
        CFI EndBlock cfiPicker145

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
        CFI Block cfiCond146 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_27
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond147 Using cfiCommon0
        CFI (cfiCond147) NoFunction
        CFI (cfiCond147) Conditional ??CrossCallReturnLabel_28
        CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond147) CFA_SP SP+0
        CFI (cfiCond147) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker148 Using cfiCommon1
        CFI (cfiPicker148) NoFunction
        CFI (cfiPicker148) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_78:
        MOV     A,R1
        MOV     DPTR,#SerBuffer
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond146
        CFI EndBlock cfiCond147
        CFI EndBlock cfiPicker148

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond149 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond150 Using cfiCommon0
        CFI (cfiCond150) NoFunction
        CFI (cfiCond150) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond150) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond150) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond150) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond150) CFA_SP SP+0
        CFI (cfiCond150) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker151 Using cfiCommon1
        CFI (cfiPicker151) NoFunction
        CFI (cfiPicker151) Picker
        LCALL   ??SetTimeOut?relay
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_79:
        RET
        CFI EndBlock cfiCond149
        CFI EndBlock cfiCond150
        CFI EndBlock cfiPicker151

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
        CFI Block cfiCond152 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond153 Using cfiCommon0
        CFI (cfiCond153) NoFunction
        CFI (cfiCond153) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_1
        CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond153) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond153) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond153) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond153) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond153) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond153) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond153) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond153) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond153) CFA_SP SP+0
        CFI (cfiCond153) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond154 Using cfiCommon0
        CFI (cfiCond154) NoFunction
        CFI (cfiCond154) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_60
        CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond154) CFA_SP SP+0
        CFI (cfiCond154) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond155 Using cfiCommon0
        CFI (cfiCond155) NoFunction
        CFI (cfiCond155) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_61
        CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond155) CFA_SP SP+0
        CFI (cfiCond155) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond156 Using cfiCommon0
        CFI (cfiCond156) NoFunction
        CFI (cfiCond156) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_62
        CFI (cfiCond156) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond156) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond156) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond156) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond156) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond156) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond156) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond156) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond156) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond156) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond156) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond156) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond156) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond156) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond156) CFA_SP SP+0
        CFI (cfiCond156) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond157 Using cfiCommon0
        CFI (cfiCond157) NoFunction
        CFI (cfiCond157) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_27
        CFI (cfiCond157) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond157) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond157) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond157) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond157) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond157) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond157) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond157) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond157) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond157) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond157) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond157) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond157) CFA_SP SP+0
        CFI (cfiCond157) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond158 Using cfiCommon0
        CFI (cfiCond158) NoFunction
        CFI (cfiCond158) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_28
        CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond158) CFA_SP SP+0
        CFI (cfiCond158) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond159 Using cfiCommon0
        CFI (cfiCond159) NoFunction
        CFI (cfiCond159) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_2
        CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond159) CFA_SP SP+0
        CFI (cfiCond159) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond160 Using cfiCommon0
        CFI (cfiCond160) NoFunction
        CFI (cfiCond160) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_3
        CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond160) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond160) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond160) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond160) CFA_SP SP+0
        CFI (cfiCond160) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker161 Using cfiCommon1
        CFI (cfiPicker161) NoFunction
        CFI (cfiPicker161) Picker
        MOV     DPTR,#MInfo
        CLR     A
        CFI EndBlock cfiCond152
        CFI EndBlock cfiCond153
        CFI EndBlock cfiCond154
        CFI EndBlock cfiCond155
        CFI EndBlock cfiCond156
        CFI EndBlock cfiCond157
        CFI EndBlock cfiCond158
        CFI EndBlock cfiCond159
        CFI EndBlock cfiCond160
        CFI EndBlock cfiPicker161
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
        CFI Block cfiCond162 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_29
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond163 Using cfiCommon0
        CFI (cfiCond163) NoFunction
        CFI (cfiCond163) Conditional ??CrossCallReturnLabel_80, ??CrossCallReturnLabel_30
        CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond163) CFA_SP SP+0
        CFI (cfiCond163) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond164 Using cfiCommon0
        CFI (cfiCond164) NoFunction
        CFI (cfiCond164) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_0
        CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond164) CFA_SP SP+0
        CFI (cfiCond164) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond165 Using cfiCommon0
        CFI (cfiCond165) NoFunction
        CFI (cfiCond165) Conditional ??CrossCallReturnLabel_76, ??CrossCallReturnLabel_1
        CFI (cfiCond165) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond165) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond165) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond165) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond165) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond165) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond165) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond165) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond165) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond165) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond165) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond165) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond165) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond165) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond165) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond165) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond165) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond165) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond165) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond165) CFA_SP SP+0
        CFI (cfiCond165) CFA_XSP16 add(XSP16, 19)
        CFI Block cfiCond166 Using cfiCommon0
        CFI (cfiCond166) NoFunction
        CFI (cfiCond166) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_60
        CFI (cfiCond166) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond166) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond166) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond166) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond166) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond166) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond166) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond166) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond166) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond166) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond166) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond166) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond166) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond166) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond166) CFA_SP SP+0
        CFI (cfiCond166) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond167 Using cfiCommon0
        CFI (cfiCond167) NoFunction
        CFI (cfiCond167) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_61
        CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond167) CFA_SP SP+0
        CFI (cfiCond167) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond168 Using cfiCommon0
        CFI (cfiCond168) NoFunction
        CFI (cfiCond168) Conditional ??CrossCallReturnLabel_77, ??CrossCallReturnLabel_62
        CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond168) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond168) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond168) CFA_SP SP+0
        CFI (cfiCond168) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond169 Using cfiCommon0
        CFI (cfiCond169) NoFunction
        CFI (cfiCond169) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_27
        CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond169) CFA_SP SP+0
        CFI (cfiCond169) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond170 Using cfiCommon0
        CFI (cfiCond170) NoFunction
        CFI (cfiCond170) Conditional ??CrossCallReturnLabel_78, ??CrossCallReturnLabel_28
        CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond170) CFA_SP SP+0
        CFI (cfiCond170) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiCond171 Using cfiCommon0
        CFI (cfiCond171) NoFunction
        CFI (cfiCond171) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_2
        CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond171) CFA_SP SP+0
        CFI (cfiCond171) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond172 Using cfiCommon0
        CFI (cfiCond172) NoFunction
        CFI (cfiCond172) Conditional ??CrossCallReturnLabel_79, ??CrossCallReturnLabel_3
        CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond172) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond172) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond172) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond172) CFA_SP SP+0
        CFI (cfiCond172) CFA_XSP16 add(XSP16, 14)
        CFI Block cfiPicker173 Using cfiCommon1
        CFI (cfiPicker173) NoFunction
        CFI (cfiPicker173) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond162
        CFI EndBlock cfiCond163
        CFI EndBlock cfiCond164
        CFI EndBlock cfiCond165
        CFI EndBlock cfiCond166
        CFI EndBlock cfiCond167
        CFI EndBlock cfiCond168
        CFI EndBlock cfiCond169
        CFI EndBlock cfiCond170
        CFI EndBlock cfiCond171
        CFI EndBlock cfiCond172
        CFI EndBlock cfiPicker173
//  983 
//  984 /*************************************************
//  985 Function:       InitBlock
//  986 Description:
//  987      initialize a block value
//  988 Parameter:
//  989      addr       the address of the block
//  990      value      the value to be initialized, 4 bytes buffer
//  991 Return:
//  992      short      status of implement
//  993 **************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  994 short InitBlock(unsigned char addr,unsigned char *value)
InitBlock:
        CFI Block cfiBlock174 Using cfiCommon0
        CFI Function InitBlock
        CODE
//  995 {
        FUNCALL InitBlock, `Write`
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     A,R1
        MOV     R6,A
//  996     unsigned char tmp[16],i;
//  997     short status = STATUS_SUCCESS;
//  998     for(i=0;i<4;i++)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,R2
        ADD     A,#0x4
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R5,A
//  999     {
// 1000     	tmp[i]=value[i];
??InitBlock_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
// 1001     	tmp[i+4]=255-value[i];
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,#-0x1
        CLR     C
        SUBB    A,R7
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 1002     	tmp[i+8]=value[i];
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 1003     }
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,R4
        XRL     A,R2
        JNZ     ??InitBlock_1
        MOV     A,R5
        XRL     A,R3
??InitBlock_1:
        JNZ     ??InitBlock_0
// 1004     tmp[12]=addr;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
// 1005     tmp[13]=255-addr;
        MOV     A,#-0x1
        CLR     C
        SUBB    A,R6
        MOV     R0,A
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
// 1006     tmp[14]=tmp[12];
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1007     tmp[15]=tmp[13];
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
// 1008     status=Write(addr,tmp);
// 1009     return status;
        ; Setup parameters for call to function Write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     A,R6
        MOV     R1,A
        LCALL   ??Write?relay
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock174
// 1010 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SetTimeOut?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SetTimeOut

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Rc522Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Rc522Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Rc522RFReset?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Rc522RFReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??M522PcdCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    M522PcdCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Request?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Request

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CascAnticoll?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    CascAnticoll

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Select?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Select

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??HaltA?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    HaltA

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Authentication?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Authentication

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Read?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    `Read`

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Write?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    `Write`

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ValueOper?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ValueOper

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??InitBlock?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    InitBlock

        END
// 
// 2 741 bytes in segment BANKED_CODE
//    78 bytes in segment BANK_RELAYS
//    74 bytes in segment XDATA_Z
// 
// 2 819 bytes of CODE  memory
//    74 bytes of XDATA memory
//
//Errors: none
//Warnings: none
